"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[1893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),l=n(6550),s=n(1980),c=n(7392),p=n(12);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,c]=m({queryString:n,groupId:a}),[u,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),k=(()=>{const e=s??u;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{k&&l(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var k=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==l&&(u(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:h,onClick:d},i,{className:(0,o.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},9967:(e,t,n)=>{n.d(t,{f:()=>i});var a=n(7294),r=n(4996),o=n(941);const i=e=>{let{url:t,height:n,alt:i}=e;return a.createElement("p",{style:{display:"flex",justifyContent:"center"}},a.createElement(o.Z,{height:n,alt:i,sources:{light:(0,r.Z)(t),dark:(0,r.Z)(t)}}))}},8673:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={toc:[{value:"Connecting and joining the room",id:"connecting-and-joining-the-room",level:3}]},i="wrapper";function l(e){let{components:t,...l}=e;return(0,r.kt)(i,(0,a.Z)({},o,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can learn more about Jellyfish architecture in ",(0,r.kt)("a",{parentName:"p",href:"/"},"Jellyfish\ndocs"),". This section provides a\nbrief description aimed at front-end developers")),(0,r.kt)("p",null,"Let's introduce some concepts first:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Peer")," - A peer is a client-side entity that connects to the server to\npublish, subscribe or publish and subscribe to tracks published by components\nor other peers. You can think of it as a participant in a room. At the moment,\nthere is only one type of peer - WebRTC."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Track")," - An object that represents an audio or video stream. A track can be\nassociated with a local media source, such as a camera or microphone, or a\nremote media source received from another user. Tracks are used to capture,\ntransmit, and receive audio and video data in WebRTC applications."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Room")," - In Jellyfish, a room serves as a holder for peers and components,\nits function varying based on application. From a front-end perspective, this will\nbe probably one meeting or a broadcast.")),(0,r.kt)("p",null,"For a better understanding of these concepts here is an example of a room that\nholds a standard WebRTC conference from a perspective of the User:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Room example",src:n(4953).Z,width:"1195",height:"1224"})),(0,r.kt)("p",null,"In this example, peers stream multiple video and audio tracks. Peer #1 streams\neven two video tracks (camera and screencast track). You can differentiate\nbetween them by using track metadata. The user gets info about peers and their\ntracks from the server using Jellyfish Client. The user is also informed in real\ntime about peers joining/leaving and tracks being added/removed."),(0,r.kt)("p",null,"To keep this tutorial short we'll simplify things a little. Every peer will stream just one\nvideo track."),(0,r.kt)("h3",{id:"connecting-and-joining-the-room"},"Connecting and joining the room"),(0,r.kt)("p",null,"The general flow of connecting to the server and joining the room in a standard\nWebRTC conference setup looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connecting and joing the room",src:n(7877).Z,width:"6158",height:"2195"})),(0,r.kt)("p",null,"The parts that you need to implement are marked in blue and things handled by\nJellyfish are marked in red."),(0,r.kt)("p",null,"Firstly, the user logs in. Then your backend authenticates the user and obtains\na peer token. It allows the user to authenticate and join the room in Jellyfish\nServer. The backend passes the token to your front-end, and your front-end passes\nit to Jellyfish Client. The client establishes the connection with Jellyfish\nServer. Then Jellyfish Client sets up tracks (camera, microphone) to stream and\njoins the room on Jellyfish Server. Finally, your front-end can display the room\nfor the user."),(0,r.kt)("p",null,"For this tutorial we simplified this process a bit - you don't have to implement\na backend or authentication. Jellyfish Dashboard will do this for you. It's also\na nice tool to test and play around with Jellyfish. The flow with Jellyfish Dashboard looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connecting and joing the room with dashboard",src:n(5129).Z,width:"5336",height:"2152"})),(0,r.kt)("p",null,"You can see that the only things you need to implement are interactions with the\nuser and Jellyfish Client. This tutorial will show you how to do it."))}l.isMDXComponent=!0},992:(e,t,n)=>{n.d(t,{ZP:()=>c});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={toc:[]},s="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are a couple of ways to start the dashboard:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"main",label:"Up-to-date version",mdxType:"TabItem"},(0,r.kt)("p",null,"The current version of the dashboard is ready to use and available\n",(0,r.kt)("a",{parentName:"p",href:"https://jellyfish-dev.github.io/jellyfish-dashboard/"},"here"),".\nEnsure that it is compatible with your Jellyfish server!\nPlease note that this dashboard only supports secure connections (https/wss)\nor connections to localhost. Any insecure requests (http/ws) will be automatically blocked by the browser.")),(0,r.kt)(i.Z,{value:"docker",label:"Docker container",mdxType:"TabItem"},(0,r.kt)("p",null,"The dashboard is also published as a docker image, you can pull it using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ghcr.io/jellyfish-dev/jellyfish-dashboard:v0.1.2\n"))),(0,r.kt)(i.Z,{value:"repo",label:"Official repository",mdxType:"TabItem"},(0,r.kt)("p",null,"You can also clone our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/jellyfish-dashboard"},"repo"),"\nand run dashboard locally"))))}c.isMDXComponent=!0},9:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={toc:[]},i="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(i,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"For testing, we'll run the Jellyfish Media Server locally using Docker image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -p 50000-50050:50000-50050/udp \\\n           -p 5002:5002/tcp \\\n           -e JF_CHECK_ORIGIN=false \\\n           -e JF_HOST=<your ip address>:5002 \\\n           -e JF_PORT="5002" \\\n           -e JF_WEBRTC_USED=true \\\n           -e JF_WEBRTC_TURN_PORT_RANGE=50000-50050 \\\n           -e JF_WEBRTC_TURN_IP=<your ip address> \\\n           -e JF_WEBRTC_TURN_LISTEN_IP=0.0.0.0 \\\n           -e JF_SERVER_API_TOKEN=development \\\n           ghcr.io/jellyfish-dev/jellyfish:0.3.0\n')),(0,r.kt)("p",null,"Make sure to set ",(0,r.kt)("inlineCode",{parentName:"p"},"JF_WEBRTC_TURN_IP")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JF_HOST")," to your local IP address. Without it, the mobile device won't be able to connect to the Jellyfish."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To check your local IP you can use this handy command (Linux/macOS):"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}'\n"))))}l.isMDXComponent=!0},1084:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>b,frontMatter:()=>c,metadata:()=>u,toc:()=>h});var a=n(7462),r=(n(7294),n(3905)),o=n(9967),i=n(8673),l=n(9),s=n(992);const c={},p="Simple React App",u={unversionedId:"tutorials/simple-react-app",id:"version-0.3.0/tutorials/simple-react-app",title:"Simple React App",description:"What you'll learn",source:"@site/versioned_docs/version-0.3.0/tutorials/simple-react-app.mdx",sourceDirName:"tutorials",slug:"/tutorials/simple-react-app",permalink:"/jellyfish-docs/tutorials/simple-react-app",draft:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/versioned_docs/version-0.3.0/tutorials/simple-react-app.mdx",tags:[],version:"0.3.0",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Jellyfish Dashboard",permalink:"/jellyfish-docs/tutorials/dashboard"},next:{title:"React Native",permalink:"/jellyfish-docs/tutorials/react-native"}},d={},h=[{value:"What you&#39;ll learn",id:"what-youll-learn",level:2},{value:"What do you need",id:"what-do-you-need",level:2},{value:"Jellyfish architecture",id:"jellyfish-architecture",level:2},{value:"Setup",id:"setup",level:2},{value:"Create React + Vite project",id:"create-react--vite-project",level:3},{value:"Add dependencies",id:"add-dependencies",level:3},{value:"Start the Jellyfish backend",id:"start-the-jellyfish-backend",level:3},{value:"Start the dashboard web front-end",id:"start-the-dashboard-web-front-end",level:3},{value:"(Optional) Add a bit of CSS styling",id:"optional-add-a-bit-of-css-styling",level:2},{value:"General project structure",id:"general-project-structure",level:2},{value:"First step - prepare all the hooks and the context",id:"first-step---prepare-all-the-hooks-and-the-context",level:2},{value:"Now we need to wrap our app with the context provider",id:"now-we-need-to-wrap-our-app-with-the-context-provider",level:3},{value:"UI component that will connect to the server and join the room",id:"ui-component-that-will-connect-to-the-server-and-join-the-room",level:2},{value:"Once the UI is ready, we need to implement the logic",id:"once-the-ui-is-ready-we-need-to-implement-the-logic",level:3},{value:"Let&#39;s send our screen to the server",id:"lets-send-our-screen-to-the-server",level:3},{value:"What about the receiving part?",id:"what-about-the-receiving-part",level:2},{value:"This is where the second component comes in handy",id:"this-is-where-the-second-component-comes-in-handy",level:3},{value:"Now the logic for the component",id:"now-the-logic-for-the-component",level:3},{value:"Now we can use it in our main component",id:"now-we-can-use-it-in-our-main-component",level:3},{value:"Summary",id:"summary",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},f=m("Tabs"),k=m("TabItem"),y={toc:h},v="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(v,(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simple-react-app"},"Simple React App"),(0,r.kt)("h2",{id:"what-youll-learn"},"What you'll learn"),(0,r.kt)("p",null,"This tutorial will guide you through creating your first React project that uses the Jellyfish Client.\nBy the end of the tutorial, you'll have a working web application that connects to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/jellyfish"},"Jellyfish Media Server")," using WebRTC technology."),(0,r.kt)(o.f,{url:"/img/tutorials/react-finished.gif",height:500,alt:"Finished app",mdxType:"ImageWrapper"}),(0,r.kt)("p",null,"You can check out the finished project ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/jellyfish-clients-tutorials/tree/main/JellyfishDashboardReact/JellyfishDashboard"},"here")),(0,r.kt)("h2",{id:"what-do-you-need"},"What do you need"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a little bit of experience in creating React apps"),(0,r.kt)("li",{parentName:"ul"},"IDE of your choice (for example ",(0,r.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"Visual Studio Code"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node.js")," installed on your machine")),(0,r.kt)("h2",{id:"jellyfish-architecture"},"Jellyfish architecture"),(0,r.kt)(i.ZP,{mdxType:"JellyfishArchitecture"}),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"create-react--vite-project"},"Create React + Vite project"),(0,r.kt)("p",null,"Firstly create a brand new project."),(0,r.kt)(f,{mdxType:"Tabs"},(0,r.kt)(k,{value:"vite",label:"Vite",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest my-react-app -- --template react-ts\n")))),(0,r.kt)("h3",{id:"add-dependencies"},"Add dependencies"),(0,r.kt)(f,{mdxType:"Tabs"},(0,r.kt)(k,{value:"react",label:"React",mdxType:"TabItem"},"For this module to work you'll need to add our `react-client-sdk` package. This is necessary to create and connect Jellyfish Client.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install https://github.com/jellyfish-dev/react-client-sdk#0.1.2\n")))),(0,r.kt)("h3",{id:"start-the-jellyfish-backend"},"Start the Jellyfish backend"),(0,r.kt)(l.ZP,{mdxType:"StartingJellyfishBackend"}),(0,r.kt)("h3",{id:"start-the-dashboard-web-front-end"},"Start the dashboard web front-end"),(0,r.kt)(s.ZP,{mdxType:"StartingJellyfishDashboard"}),(0,r.kt)("h2",{id:"optional-add-a-bit-of-css-styling"},"(Optional) Add a bit of CSS styling"),(0,r.kt)("p",null,"For this project, we prepared simple ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Crackhoff/jellyfish-clients-tutorials/blob/main/JellyfishDashboardReact/JellyfishDashboard/src/styles.css"},"CSS classes"),",\nYou are free to use it or create your own."),(0,r.kt)("h2",{id:"general-project-structure"},"General project structure"),(0,r.kt)("p",null,"Our app will consist of two parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"a component that will connect to the server and join the room")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"a component that will display the video tracks from other participants"))),(0,r.kt)("h2",{id:"first-step---prepare-all-the-hooks-and-the-context"},"First step - prepare all the hooks and the context"),(0,r.kt)("p",null,"To connect to the Jellyfish backend, we need to create a Membrane Client\ninstance. We can do it by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," function from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@jellyfish-dev/react-client-sdk")," package. It needs two generic parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"PeerMetadata")," - the type of metadata that will be sent to the server when\nconnecting to the room (for example, user name) it has to be serializable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"TrackMetadata")," - the type of the metadata that will be sent to the server when\nsending a track (for example, track name) it has to be serializable as well"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import React from "react";\nimport { create } from "@jellyfish-dev/react-client-sdk";\n\n// Example metadata types for peer and track\n// You can define your metadata types just make sure they are serializable\ntype PeerMetadata = {\n  name: string;\n};\n\ntype TrackMetadata = {\n  type: "camera" | "screen";\n};\n\n// Create a Jellyfish client instance\n// Since we will use this context outside of the component we need to export it\nexport const {\n  JellyfishContextProvider, // Context provider\n} = create<PeerMetadata, TrackMetadata>();\n\nexport const App = () => {};\n')),(0,r.kt)("h3",{id:"now-we-need-to-wrap-our-app-with-the-context-provider"},"Now we need to wrap our app with the context provider"),(0,r.kt)("p",null,"That's all we will need to do in this file. Simply import the ",(0,r.kt)("inlineCode",{parentName:"p"},"JellyfishContextProvider")," along with the ",(0,r.kt)("inlineCode",{parentName:"p"},"App"),"\ncomponent and wrap the ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," component with the ",(0,r.kt)("inlineCode",{parentName:"p"},"JellyfishContextProvider"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="main.tsx"',title:'"main.tsx"'},'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport { App, JellyfishContextProvider } from "./components/App";\n\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n  <React.StrictMode>\n    <JellyfishContextProvider>\n      <App />\n    </JellyfishContextProvider>\n  </React.StrictMode>\n);\n')),(0,r.kt)("h2",{id:"ui-component-that-will-connect-to-the-server-and-join-the-room"},"UI component that will connect to the server and join the room"),(0,r.kt)("p",null,"The UI of the component will be quite simple. It will consist of a simple text input field\nthat will allow us to enter the peer token and a button that\nwill connect to the server and join the room. We can also display the status of the connection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import React, { useState } from "react";\n//...\nexport const App = () => {\n  // Create a state to store the peer token\n  const [token, setToken] = useState("");\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>\n    <input value={token} onChange={(e) => setToken(() => e?.target?.value)} placeholder="token" />\n    <div style={{ display: "flex", flexDirection: "row", gap: "8px" }}>\n\n       <button\n          disabled={}\n          onClick={() => {}};\n        >\n          Connect\n        </button>\n        <button\n          disabled={}\n          onClick={() => {}};\n        >\n          Disconnect\n        </button>\n        <span>Status: {}</span>\n    </div>\n    </div>\n  );\n};\n')),(0,r.kt)("h3",{id:"once-the-ui-is-ready-we-need-to-implement-the-logic"},"Once the UI is ready, we need to implement the logic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { SignalingUrl } from "@jellyfish-dev/react-client-sdk/.";\n//...\nexport const {\n  // highlight-start\n  useStatus, // Hook to check the status of the connection\n  useConnect, // Hook to connect to the server\n  useDisconnect, // Hook to disconnect from the server\n  // highlight-end\n  JellyfishContextProvider, // Context provider\n};\nexport const App = () => {\n  // Create a state to store the peer token\n  const [token, setToken] = useState("");\n  // Use the built-in hook to check the status of the connection\n  const status = useStatus();\n  const connect = useConnect();\n  const disconnect = useDisconnect();\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>\n      <input\n        className="input-field"\n        value={token}\n        onChange={(e) => setToken(() => e?.target?.value)}\n        placeholder="token"\n      />\n      <div style={{ display: "flex", flexDirection: "row", gap: "8px" }}>\n        <button\n          className="button"\n          disabled={token === "" || status === "joined"} // simple check to avoid errors\n          onClick={() => {\n            // highlight-start\n            connect({\n              peerMetadata: { name: "John Doe" }, // example metadata\n              token: token,\n            });\n            // highlight-end\n          }}\n        >\n          Connect\n        </button>\n        <button\n          className="button"\n          disabled={status !== "joined"}\n          onClick={() => {\n            // highlight-next-line\n            disconnect();\n          }}\n        >\n          Disconnect\n        </button>\n        // highlight-next-line\n        <span className="span-status">Status: {status}</span>\n      </div>\n    </div>\n  );\n};\n')),(0,r.kt)("p",null,"Great! Now we can connect to the server and join the room. But we still need to\nadd some logic to send our tracks to the server and receive tracks from others."),(0,r.kt)("h3",{id:"lets-send-our-screen-to-the-server"},"Let's send our screen to the server"),(0,r.kt)("p",null,"This hook uses ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices"},"Navigator.mediaDevices")," take a look how it works"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import React, { useEffect, useState } from "react";\nimport { create, SCREEN_SHARING_MEDIA_CONSTRAINTS } from "@jellyfish-dev/react-client-sdk";\nimport { SignalingUrl, Peer } from "@jellyfish-dev/react-client-sdk/.";\n//...\nexport const {\n  useStatus, // Hook to check the status of the connection\n  // highlight-next-line\n  useApi, // Hook to get the webrtcApi reference\n  useConnect, // Hook to connect to the server\n  useDisconnect, // Hook to disconnect from the server\n  JellyfishContextProvider, // Context provider\n} = create<PeerMetadata, TrackMetadata>();\n\nexport const App = () => {\n  //...\n  // Get the webrtcApi reference\n  const webrtcApi = useApi();\n\n   function startScreenSharing() {\n      // Get screen sharing MediaStream\n            navigator.mediaDevices.getDisplayMedia(SCREEN_SHARING_MEDIA_CONSTRAINTS).then((screenStream) => {\n              // Add local MediaStream to webrtc\n              screenStream.getTracks().forEach((track) => webrtcApi.addTrack(track, screenStream, { type: "screen" }));\n    };\n   };\n   return (\n  //...\n  <button\n  className="button"\n    disabled={status !== "joined"}\n    onClick={() => {\n      startScreenSharing();\n    }}\n  >\n    Start screen share\n  </button>\n  <span>Status: {status}</span>\n  //...\n  )\n};\n')),(0,r.kt)("p",null,"You should now see your screen received for each connected client on the dashboard. You can add another participant to check this out!"),(0,r.kt)("p",null,"The streaming part of the app is ready!"),(0,r.kt)("h2",{id:"what-about-the-receiving-part"},"What about the receiving part?"),(0,r.kt)("h3",{id:"this-is-where-the-second-component-comes-in-handy"},"This is where the second component comes in handy"),(0,r.kt)("p",null,"For each track received, we will create a new video element and display it on the screen. For clarity, we will separate this component into another file:"),(0,r.kt)("p",null,"Create in your directory file ",(0,r.kt)("inlineCode",{parentName:"p"},"VideoPlayer.tsx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="VideoPlayer.tsx"',title:'"VideoPlayer.tsx"'},'type Props = {\n  stream: MediaStream | null | undefined;\n};\n\nconst VideoPlayer = ({ stream }: Props) => {\n  return (\n    <div className="video-container">\n      <video autoPlay playsInline muted ref={/* place for track ref*/} />\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n')),(0,r.kt)("h3",{id:"now-the-logic-for-the-component"},"Now the logic for the component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="VideoPlayer.tsx"',title:'"VideoPlayer.tsx"'},"type Props = {\n  stream: MediaStream | null | undefined;\n};\n\nconst VideoPlayer = ({ stream }: Props) => {\n  const videoRef: RefObject<HTMLVideoElement> = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (!videoRef.current) return;\n    videoRef.current.srcObject = stream || null;\n  }, [stream]);\n\n  return (\n    <div>\n      <video autoPlay playsInline muted ref={videoRef} />\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n")),(0,r.kt)("h3",{id:"now-we-can-use-it-in-our-main-component"},"Now we can use it in our main component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import React, { useEffect, useState } from "react";\nimport { create, SCREEN_SHARING_MEDIA_CONSTRAINTS } from "@jellyfish-dev/react-client-sdk";\nimport { SignalingUrl, Peer } from "@jellyfish-dev/react-client-sdk/.";\nimport VideoPlayer from "./VideoPlayer";\n//...\n\nexport const {\n useStatus, // Hook to check the status of the connection\n  // highlight-next-line\n  useTracks, // Hook to get the tracks from the server\n  useApi, // Hook to get the webrtcApi reference\n  useConnect, // Hook to connect to the server\n  useDisconnect, // Hook to disconnect from the server\n  JellyfishContextProvider, // Context provider\n} = create<PeerMetadata, TrackMetadata>();\nexport const App = () => {\n  const tracks = useTracks();\n  //...\n  <div\n        style={{\n          display: "flex",\n          flexWrap: "wrap",\n          justifyContent: "center", // To align items in the center\n          gap: "20px",\n        }}\n      >\n  {Object.values(tracks).map(({ stream, trackId }) => (\n        <VideoPlayer key={trackId} stream={stream} /> // pass the stream to the component\n      ))}\n  </div>\n  //...\n  )\n')),(0,r.kt)("p",null,"You should see all the tracks sent from the dashboard directly on your page, to test them, add a new client, and add a track (for example a rotating frog). It will show up in your app automatically:"),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Congrats on finishing your first Jellyfish web application! In this tutorial,\nYou've learned how to make a basic Jellyfish client application that streams your screen and\nreceives video tracks with WebRTC technology."),(0,r.kt)("p",null,"But this was just the beginning. Jellyfish Client supports much more than just\nstreaming camera: It can also stream audio or your device's camera,\nconfigure your camera and audio devices, detect voice activity, control\nsimulcast, bandwidth and encoding settings, show camera preview, display WebRTC\nstats and more to come. Check out our other tutorials to learn about those\nfeatures."),(0,r.kt)("p",null,"You can also take a look at our fully featured ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/react-native-membrane-webrtc/tree/master/example"},"Videoroom Demo\nexample"),":"),(0,r.kt)(o.f,{url:"/img/tutorials/videoroom.gif",alt:"Videoroom Demo",mdxType:"ImageWrapper"}))}b.isMDXComponent=!0},7877:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connection-1c1c4ee125e1e5dec0fcfad61e0174a8.png"},5129:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard_connection-06d1d36ef4f41cc0672c2df0511af63a.png"},4953:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/room_example-e9c6acb4df6063de5a8978dc6710b909.png"}}]);