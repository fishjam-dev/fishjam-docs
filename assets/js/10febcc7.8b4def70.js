"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[9677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,u=p["".concat(c,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(u,o(o({ref:t},m),{},{components:n})):r.createElement(u,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8490:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905)),a=n(4996),o=n(941);const s={},c="Example Scenarios",l={unversionedId:"introduction/example_scenarios",id:"version-0.2.1/introduction/example_scenarios",title:"Example Scenarios",description:"Below, we present example scenarios that can be achieved with Jellyfish.",source:"@site/versioned_docs/version-0.2.1/introduction/example_scenarios.md",sourceDirName:"introduction",slug:"/introduction/example_scenarios",permalink:"/jellyfish-docs/0.2.1/introduction/example_scenarios",draft:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/versioned_docs/version-0.2.1/introduction/example_scenarios.md",tags:[],version:"0.2.1",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Basic Concepts",permalink:"/jellyfish-docs/0.2.1/introduction/basic_concepts"},next:{title:"Installation",permalink:"/jellyfish-docs/0.2.1/getting_started/installation"}},m={},p=[{value:"Real-time video conferencing system",id:"real-time-video-conferencing-system",level:2},{value:"Broadcasting system with the real-time mixin",id:"broadcasting-system-with-the-real-time-mixin",level:2},{value:"Displaying IP camera streams in a web browser",id:"displaying-ip-camera-streams-in-a-web-browser",level:2}],d={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-scenarios"},"Example Scenarios"),(0,i.kt)("p",null,"Below, we present example scenarios that can be achieved with Jellyfish.\nEach scenario consists of a short description and illustrative Jellyfish\ninternal architecture so that you can catch the difference between peers\nand components even better!"),(0,i.kt)("h2",{id:"real-time-video-conferencing-system"},"Real-time video conferencing system"),(0,i.kt)("p",null,"In this scenario, we want to create a simple video conferencing system\nwhere people can talk to each other in the real-time."),(0,i.kt)("p",null,"Because of interactive and real-time requirements, the natural choice is\nto use the WebRTC standard."),(0,i.kt)("p",null,"The final architecture would look like this:"),(0,i.kt)(o.Z,{alt:"Real-time video conferencing system architecture",sources:{light:(0,a.Z)("/img/video-conferencing-light.png"),dark:(0,a.Z)("/img/video-conferencing-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("h2",{id:"broadcasting-system-with-the-real-time-mixin"},"Broadcasting system with the real-time mixin"),(0,i.kt)("p",null,"In this scenario, we want to create a broadcasting solution where\nthe conversation between multiple people is broadcasted to the broader\naudience."),(0,i.kt)("p",null,"Here, we choose WebRTC as a standard used for connecting people talking\nto each other in real-time and HLS for creating a playlist that can be\nthen uploaded to CDN and broadcasted to the broader audience."),(0,i.kt)("p",null,"As you can see, the whole system will automatically\nadapt to the number of participants talking in real-time.\nIn particular, Jellyfish will handle a scenario with only one streamer out of the box."),(0,i.kt)(o.Z,{alt:"Broadcasting system architecture",sources:{light:(0,a.Z)("/img/broadcasting-real-time-mixin-light.png"),dark:(0,a.Z)("/img/broadcasting-real-time-mixin-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("h2",{id:"displaying-ip-camera-streams-in-a-web-browser"},"Displaying IP camera streams in a web browser"),(0,i.kt)("p",null,"In this scenario, we have a set of IP cameras and we want to display\ntheir streams in a web browser.\nIP cameras very often use RTSP for streaming media but browsers\ndon't ship with support for this protocol.\nTherefore, to display audio and video in a web browser, we have to use either WebRTC or HLS.\nBecause, in this scenario, the delay is not the most crucial thing, we choose HLS."),(0,i.kt)("p",null,"The most important thing here is that the RTSP component connects to the IP camera\nand then the camera starts streaming.\nIt's not the camera that initializes the connection to the server.\nTherefore, the RTSP component is a purely server-side thing - once you add it,\nit should be able to work on its own."),(0,i.kt)(o.Z,{alt:"Multiple IP cameras system architecture",sources:{light:(0,a.Z)("/img/ip-cameras-light.png"),dark:(0,a.Z)("/img/ip-cameras-dark.png")},mdxType:"ThemedImage"}))}u.isMDXComponent=!0}}]);