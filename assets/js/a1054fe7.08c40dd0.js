"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[466],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>T});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,T=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(T,l(l({ref:t},c),{},{components:n})):r.createElement(T,l({ref:t},c))}));function T(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},l="WebRTC",o={unversionedId:"getting_started/peers/webrtc",id:"getting_started/peers/webrtc",title:"WebRTC",description:"WebRTC peer allows you to connect to Jellyfish via WebRTC standard.",source:"@site/docs/getting_started/peers/webrtc.md",sourceDirName:"getting_started/peers",slug:"/getting_started/peers/webrtc",permalink:"/jellyfish-docs/getting_started/peers/webrtc",draft:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/docs/getting_started/peers/webrtc.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"SDKs",permalink:"/jellyfish-docs/getting_started/sdks"},next:{title:"HLS",permalink:"/jellyfish-docs/getting_started/components/hls"}},s={},p=[{value:"Compatibility",id:"compatibility",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"Optional",id:"optional",level:3},{value:"Env variables",id:"env-variables",level:2},{value:"Example Docker commands",id:"example-docker-commands",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"webrtc"},"WebRTC"),(0,a.kt)("p",null,"WebRTC peer allows you to connect to Jellyfish via WebRTC standard."),(0,a.kt)("h2",{id:"compatibility"},"Compatibility"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/jellyfish-docs/getting_started/components/hls"},"HLS")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/jellyfish-docs/getting_started/components/rtsp"},"RTSP"))),(0,a.kt)("h2",{id:"configuration-options"},"Configuration options"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"../../api_reference/rest_api#tag/room/operation/add_peer"},"API")," for more information."),(0,a.kt)("h3",{id:"optional"},"Optional"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enableSimulcast")," (boolean, default: true) - Enables the peer to use simulcast")),(0,a.kt)("h2",{id:"env-variables"},"Env variables"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WEBRTC_USED")," - has to be ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," if WebRTC peers will be used"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_LISTEN_IP")," - the IP address on which TURN servers will listen.\nBy default set to ",(0,a.kt)("inlineCode",{parentName:"li"},"127.0.0.1"),".\nWhen running Jellyfish via Docker, this MUST be set to ",(0,a.kt)("inlineCode",{parentName:"li"},"0.0.0.0"),", even for local tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_IP")," - the IP address, under which TURN will present itself to the clients. By default set to ",(0,a.kt)("inlineCode",{parentName:"li"},"127.0.0.1"),".\nWhen running Jellyfish via Docker, this MUST be set to real (non-loopback) address, even for local tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_PORT_RANGE")," - port range, where UDP TURN will try to open ports. By default set to ",(0,a.kt)("inlineCode",{parentName:"li"},"50000-59999"),".\nThe bigger the range is, the more users server will be able to handle.\nUseful when not using the ",(0,a.kt)("inlineCode",{parentName:"li"},"--network=host")," option to limit the UDP ports\nused only to ones published from a Docker container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TCP_TURN_PORT")," - port number of TCP TURN"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TLS_TURN_PORT")," - port number of TLS TURN, used when ",(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_PKEY")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_CERT")," are provided"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_CERT")," - SSL certificate for TLS TURN"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"INTEGRATED_TURN_PKEY")," - SSL private key for TLS TURN")),(0,a.kt)("h2",{id:"example-docker-commands"},"Example Docker commands"),(0,a.kt)("p",null,"Explicit port exposure (macOS compatible)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 50000-50050:50000-50050/udp \\\n           -p 4000:4000/tcp \\\n           -e WEBRTC_USED=true \\\n           -e INTEGRATED_TURN_PORT_RANGE=50000-50050 \\\n           -e INTEGRATED_TURN_IP=192.168.0.1 \\\n           -e SERVER_API_TOKEN=token \\\n           -e VIRTUAL_HOST=localhost \\\n           -e SECRET_KEY_BASE=secret \\\n           ghcr.io/jellyfish-dev/jellyfish:latest\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Make sure that the exposed UDP ports match ",(0,a.kt)("inlineCode",{parentName:"p"},"INTEGRATED_TURN_PORT_RANGE"),".\nThe range of the ports shouldn't be too wide as it might cause problems with container startup.")),(0,a.kt)("p",null,"Using host network (Linux only)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --network=host \\\n           -e WEBRTC_USED=true \\\n           -e INTEGRATED_TURN_IP=192.168.0.1 \\\n           -e SERVER_API_TOKEN=token \\\n           -e VIRTUAL_HOST=localhost \\\n           -e SECRET_KEY_BASE=secret \\\n           ghcr.io/jellyfish-dev/jellyfish:latest\n")))}u.isMDXComponent=!0}}]);