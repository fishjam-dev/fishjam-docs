"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[9498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),o=n(6010);const a={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>g});var r=n(7462),o=n(7294),a=n(6010),i=n(2466),s=n(6550),l=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[l,c]=m({queryString:n,groupId:r}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,u.Nk)(n);return[r,(0,o.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),b=(()=>{const e=l??d;return f({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!f({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),h(e)}),[c,h,a]),tabValues:a}}var b=n(2389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==s&&(d(t),l(r))},f=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:f,onClick:p},i,{className:(0,a.Z)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function _(e){const t=h(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",v.tabList)},o.createElement(y,(0,r.Z)({},e,t)),o.createElement(k,(0,r.Z)({},e,t)))}function g(e){const t=(0,b.Z)();return o.createElement(_,(0,r.Z)({key:String(t)},e))}},5337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(7462),o=(n(7294),n(3905)),a=n(4866),i=n(5162);const s={},l="Notifications",c={unversionedId:"getting_started/notifications",id:"version-0.3.0/getting_started/notifications",title:"Notifications",description:"Jellyfish sends server side notifications whenever some important event occurs, e.g.:",source:"@site/versioned_docs/version-0.3.0/getting_started/notifications.md",sourceDirName:"getting_started",slug:"/getting_started/notifications",permalink:"/jellyfish-docs/getting_started/notifications",draft:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/versioned_docs/version-0.3.0/getting_started/notifications.md",tags:[],version:"0.3.0",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Authentication",permalink:"/jellyfish-docs/getting_started/authentication"},next:{title:"Metrics",permalink:"/jellyfish-docs/getting_started/metrics"}},u={},d=[{value:"WebSockets",id:"websockets",level:2},{value:"Webhooks",id:"webhooks",level:2}],p={toc:d},f="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notifications"},"Notifications"),(0,o.kt)("p",null,"Jellyfish sends server side notifications whenever some important event occurs, e.g.:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a room has been created"),(0,o.kt)("li",{parentName:"ul"},"some peer has connected"),(0,o.kt)("li",{parentName:"ul"},"component has crashed"),(0,o.kt)("li",{parentName:"ul"},"etc.")),(0,o.kt)("p",null,"A full list of available notifications is always present in specific server SDK documentation.\nNotifications can be received through ",(0,o.kt)("a",{parentName:"p",href:"#websockets"},"WebSockets")," or ",(0,o.kt)("a",{parentName:"p",href:"#webhooks"},"Webhooks"),"."),(0,o.kt)("h2",{id:"websockets"},"WebSockets"),(0,o.kt)("p",null,"WebSocket (WS) is a communication protocol that provides full-duplex communication between a client and a server over a persistent connection.\nWhen you create a notifier, it will open WS connection, receive notifications,\ndecode and return them to you via callbacks or messages.\nIn other words, you don't have to do anything on your own."),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from jellyfish import Notifier\n\nserver_address = \"localhost:5002\"\nserver_api_token = \"development\"\n\nnotifier = Notifier(server_address = server_address, server_api_token = server_api_token)\n\n@notifier.on_server_notification\ndef handle_notification(server_notification):\n    print(f'Received a notification: {server_notification}')\n\n@notifier.on_metrics\ndef handle_metrics(metrics_report):\n    print(f'Received WebRTC metrics: {metrics_report}')\n\nasync def run():\n    await notifier.connect()\n    await notifier.wait_ready()\n\nasyncio.run(run())\n"))),(0,o.kt)(i.Z,{value:"elixir",label:"Elixir",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-elixir"},'server_address = "localhost:5002"\nserver_api_token = "development"\n\n{:ok, notifier} =\n  Jellyfish.WSNotifier.start(server_address: server_address, server_api_token: server_api_token)\n\n:ok = Jellyfish.WSNotifier.subscribe_server_notifications(notifier)\n:ok = Jellyfish.WSNotifier.subscribe_metrics(notifier)\n\nreceive do\n  {:jellyfish, %Jellyfish.Notification.PeerConnected{} = notification} ->\n    IO.inspect(notification)\n  # other notificaitons ...\nend\n')))),(0,o.kt)("p",null,"As a result, you should see the following logs on the server side"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"07:45:02.684 [info] New incoming server WebSocket connection, accepting\n07:45:02.688 [info] Server WS authenticated.\n")),(0,o.kt)("h2",{id:"webhooks"},"Webhooks"),(0,o.kt)("p",null,"Webhooks are simply HTTP POST requests sent to a specified URL.\nThey are a common choice in serverless architectures where a WebSocket connection cannot be established."),(0,o.kt)("p",null,"The most important difference between Webhook and WebSocket notifications is that you have to receive those\nPOST requests on your own and then use SDK's decode functions to get the actual notification."),(0,o.kt)("p",null,"To receive server notifications through webhooks you have to pass ",(0,o.kt)("inlineCode",{parentName:"p"},"webhook_url")," during room creation."),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from jellyfish import Notifier, RoomApi\nfrom jellyfish import recevie_json\n\nserver_address = "localhost:5002"\nserver_api_token = "development"\nwebhook_url = "http://localhost:5003/webhook"\n\nroom_api = RoomApi(server_address = server_address, server_api_token = server_api_token)\n_, room = room_api.create_room(webhook_url=webhook_url)\n\n# assuming you are using Flask\n@app.route("/webhook", methods=["POST"])\ndef respond_root():\n    json = request.get_json()\n    notification = receive_json(json)\n\n    return Response(status=200)\n'))),(0,o.kt)(i.Z,{value:"elixir",label:"Elixir",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-elixir"},'server_address = "localhost:5002"\nserver_api_token = "development"\nwebhook_url = "http://localhost:5003/webhook"\n\nclient = Jellyfish.Client.new(server_address: server_address, server_api_token: server_api_token)\n{:ok, %Jellyfish.Room{id: room_id}, jellyfish_address} = Jellyfish.Room.create(client, max_peers: 10, webhook_url: webhook_url)\n\n# assuming you are using Phoenix\n# router.ex\nscope "/", MyAppWeb do\n  post "/webhook", WebhookController, :receive_webhook_notification\nend\n\n# webhook_controller.ex\ndef receive_webhook_notification(conn, _params) do\n  {:ok, body, conn} = Plug.Conn.read_body(conn, [])\n  json_body = Jason.decode!(body)\n\n  notification = Jellyfish.WebhookNotifier.receive(json_body)\n\n  conn\n  |> put_resp_content_type("text/plain")\n  |> send_resp(200, "OK")\nend\n\n')))))}m.isMDXComponent=!0}}]);