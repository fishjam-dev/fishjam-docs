"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[5521],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=l,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,r=new Array(a);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:l,r[1]=o;for(var u=2;u<a;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var i=t(7294),l=t(6010);const a={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,l.Z)(a.tabItem,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>v});var i=t(7462),l=t(7294),a=t(6010),r=t(2466),o=t(6550),s=t(1980),u=t(7392),p=t(12);function c(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:l}}=e;return{value:n,label:t,attributes:i,default:l}}))}function d(e){const{values:n,children:t}=e;return(0,l.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const i=(0,o.k6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(a),(0,l.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=d(e),[r,o]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[s,u]=h({queryString:t,groupId:i}),[c,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,p.Nk)(t);return[i,(0,l.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),k=(()=>{const e=s??c;return m({value:e,tabValues:a})?e:null})();(0,l.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var k=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,t=p.indexOf(n),i=u[t].value;i!==o&&(c(n),s(i))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:r}=e;return l.createElement("li",(0,i.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>p.push(e),onKeyDown:m,onClick:d},r,{className:(0,a.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":o===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function g(e){const n=f(e);return l.createElement("div",{className:(0,a.Z)("tabs-container",b.tabList)},l.createElement(N,(0,i.Z)({},e,n)),l.createElement(y,(0,i.Z)({},e,n)))}function v(e){const n=(0,k.Z)();return l.createElement(g,(0,i.Z)({key:String(n)},e))}},332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var i=t(7462),l=(t(7294),t(3905)),a=t(4866),r=t(5162);const o={},s="Installation",u={unversionedId:"getting_started/installation",id:"getting_started/installation",title:"Installation",description:"There are two ways of running Jellyfish:",source:"@site/docs/getting_started/installation.md",sourceDirName:"getting_started",slug:"/getting_started/installation",permalink:"/jellyfish-docs/next/getting_started/installation",draft:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/docs/getting_started/installation.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Example Scenarios",permalink:"/jellyfish-docs/next/introduction/example_scenarios"},next:{title:"Architecture",permalink:"/jellyfish-docs/next/getting_started/architecture"}},p={},c=[{value:"Building from source",id:"building-from-source",level:2},{value:"Running with Docker",id:"running-with-docker",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Required in production:",id:"required-in-production",level:4},{value:"Optional:",id:"optional",level:4},{value:"Distribution:",id:"distribution",level:4},{value:"Distribution NODES_LIST specific:",id:"distribution-nodes_list-specific",level:6},{value:"Distribution DNS specific:",id:"distribution-dns-specific",level:6}],d={toc:c},m="wrapper";function h(e){let{components:n,...t}=e;return(0,l.kt)(m,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"installation"},"Installation"),(0,l.kt)("p",null,"There are two ways of running Jellyfish:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"building from source (requires Elixir and native dependencies)"),(0,l.kt)("li",{parentName:"ul"},"using Jellyfish Docker images")),(0,l.kt)("p",null,"At the moment, Jellyfish doesn't provide pre-built binaries."),(0,l.kt)("h2",{id:"building-from-source"},"Building from source"),(0,l.kt)("p",null,"Make sure to have both Elixir and Rust installed. Check the links below for instructions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://elixir-lang.org/install.html"},"Elixir")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://rustup.rs"},"Rust"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Clone the Jellyfish repo")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/jellyfish-dev/jellyfish.git\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Install native dependencies")),(0,l.kt)(a.Z,{mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"mac-intel",label:"macOS Intel",default:!0,mdxType:"TabItem"},"These instructions assume you have Homebrew installed. You can get it ",(0,l.kt)("a",{href:"https://brew.sh"},"here"),".",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'brew install srtp libnice clang-format ffmpeg opus pkg-config\nexport LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"\nexport CFLAGS="-I/usr/local/opt/openssl@1.1/include/"\nexport CPPFLAGS="-I/usr/local/opt/openssl@1.1/include/"\nexport PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"\n'))),(0,l.kt)(r.Z,{value:"mac-m1",label:"macOS Apple Silicon",default:!0,mdxType:"TabItem"},"These instructions assume you have Homebrew installed. You can get it ",(0,l.kt)("a",{href:"https://brew.sh"},"here"),".",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"brew install srtp libnice clang-format ffmpeg opus\nexport C_INCLUDE_PATH=/opt/homebrew/Cellar/libnice/0.1.18/include:/opt/homebrew/Cellar/opus/1.3.1/include:/opt/homebrew/Cellar/openssl@1.1/1.1.1l_1/include\nexport LIBRARY_PATH=/opt/homebrew/Cellar/opus/1.3.1/lib\nexport PKG_CONFIG_PATH=/opt/homebrew/Cellar/openssl@1.1/1.1.1l_1/lib/pkgconfig/\n"))),(0,l.kt)(r.Z,{value:"ubuntu",label:"Ubuntu",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sudo apt install pkg-config libsrtp2-dev libnice-dev libavcodec-dev libavformat-dev libavutil-dev libopus-dev libfdk-aac-dev\n")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Install elixir dependencies")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mix deps.get\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Run the server in development")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mix phx.server\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Create a binary")),(0,l.kt)("p",null,"You can also create Jellyfish binary with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MIX_ENV=prod mix release\n")),(0,l.kt)("p",null,"Then follow instructions printed in your terminal."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The difference between running with ",(0,l.kt)("inlineCode",{parentName:"p"},"mix phx.server")," and generating target\nbinary is that the latter is prepared for running in production so e.g.\nit includes some Erlang Virtual Machine tweaks.\nJellyfish Dockerfile always uses ",(0,l.kt)("inlineCode",{parentName:"p"},"mix release")," under the hood.")),(0,l.kt)("h2",{id:"running-with-docker"},"Running with Docker"),(0,l.kt)("p",null,"Docker images are built for production which means that you always\nneed to set a couple of ",(0,l.kt)("a",{parentName:"p",href:"#environment-variables"},"environment variables"),"."),(0,l.kt)("p",null,"An example docker command running bare Jellyfish HTTP service locally:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 8080:8080/tcp -e JF_HOST=localhost:8080 JF_SERVER_API_TOKEN=token ghcr.io/jellyfish-dev/jellyfish:0.2.0\n")),(0,l.kt)("p",null,"Note that in real case scenarios, docker commands depend on peers/components you are going to use.\nTherefore, we don't present them here but rather in each peer/component's documentation.\nAs an example see ",(0,l.kt)("a",{parentName:"p",href:"./peers/webrtc#example-docker-commands"},"WebRTC Peer"),"."),(0,l.kt)("p",null,"For the full list of Jellyfish Docker images, ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/jellyfish-dev/jellyfish/pkgs/container/jellyfish"},"see this page"),"."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Instead of passing environmental variables manually, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--env-file ./env-file")," flag,\nwhere the ",(0,l.kt)("inlineCode",{parentName:"p"},"env-file")," is a file containing the variables that the image expects,\nsee example file ",(0,l.kt)("inlineCode",{parentName:"p"},".env.sample")," in the Jellyfish repository.")),(0,l.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,l.kt)("p",null,"Environment variables are split into two groups:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"general ones - presented below"),(0,l.kt)("li",{parentName:"ul"},"peer/component-specific - each Peer and Component can expose its own environment variables.\nThey are always listed in a Peer/Component description.\nSee the list of ",(0,l.kt)("a",{parentName:"li",href:"/jellyfish-docs/next/getting_started/peers/webrtc"},"Peers")," and ",(0,l.kt)("a",{parentName:"li",href:"/jellyfish-docs/next/getting_started/components/hls"},"Components"),".")),(0,l.kt)("p",null,"Below there are general, Jellyfish environment variables.\nIf you are running Jellyfish in development, you don't need to\nset any of them."),(0,l.kt)("h4",{id:"required-in-production"},"Required in production:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_SERVER_API_TOKEN")," - token for authorizing HTTP requests.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"development")," for development builds."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_HOST")," - defines how Jellyfish should be seen from the outside.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"JF_IP:JF_PORT"),".",(0,l.kt)("br",null),"\nIt can be in the form of ",(0,l.kt)("inlineCode",{parentName:"li"},"ip:port"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"domain:port")," or simply ",(0,l.kt)("inlineCode",{parentName:"li"},"domain"),".\nUseful when hosting Jellyfish behind proxy.\nIt is returned e.g. when creating a new room.\nWhen running with Docker, ",(0,l.kt)("inlineCode",{parentName:"li"},"JF_IP")," is set to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.0.0.0"),"\nmaking the default value of ",(0,l.kt)("inlineCode",{parentName:"li"},"JF_HOST")," incorrect.\nTherefore, for Docker, you have to set ",(0,l.kt)("inlineCode",{parentName:"li"},"JF_HOST")," manually.\nFor running Docker locally, it can simply be ",(0,l.kt)("inlineCode",{parentName:"li"},"localhost:8080"),".")),(0,l.kt)("h4",{id:"optional"},"Optional:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_IP")," - an ip address to run the HTTP server on.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"127.0.0.1")," when running from source or using ",(0,l.kt)("inlineCode",{parentName:"li"},"mix release"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"0.0.0.0")," for Docker."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_PORT")," - port to run the HTTP server on.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"5002")," for development builds and ",(0,l.kt)("inlineCode",{parentName:"li"},"8080")," for production builds (",(0,l.kt)("inlineCode",{parentName:"li"},"mix release")," or Docker)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_SECRET_KEY_BASE")," - used to sign/encrypt tokens generated for Peers.\nGenerated if not provided."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_CHECK_ORIGIN")," - defines if Jellyfish will check the origin of incoming requests and socket connection. ",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),".",(0,l.kt)("br",null),"\nPossible values are ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," or a space-separated list of allowed origins (wildcards are allowed). ",(0,l.kt)("br",null),"\nExample: ",(0,l.kt)("inlineCode",{parentName:"li"},'JF_CHECK_ORIGIN="https://example.com //another.com:888 //*.other.com"')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_OUTPUT_BASE_PATH")," - a base path where Jellyfish will save its artifacts.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"./jellyfish_output/"),".",(0,l.kt)("br",null),"\nWhen running via docker, the directory can be mounted as ",(0,l.kt)("inlineCode",{parentName:"li"},"-v $(pwd)/host_directory:/app/jellyfish_output"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_METRICS_IP")," - an IP address to run metrics endpoint on.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"127.0.0.1")," when running from source or using ",(0,l.kt)("inlineCode",{parentName:"li"},"mix release"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"0.0.0.0")," for Docker."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_METRICS_PORT")," - a port to run metrics endpoint on.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"9568"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MIX_ENV")," - defines compilation environment.\nThis variable takes effect only when running from the source.\nDocker images are always built with ",(0,l.kt)("inlineCode",{parentName:"li"},"MIX_ENV=prod"),".\nPossible values are:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dev")," - uses default values for environment variables\n(default option when running with ",(0,l.kt)("inlineCode",{parentName:"li"},"mix phx.server"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"prod")," - requires that you provide values for environment variables"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test")," - used in tests")))),(0,l.kt)("h4",{id:"distribution"},"Distribution:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_ENABLED")," - whether to run Jellyfish in a cluster.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_STRATEGY_NAME")," - specify which clustering strategy to use.",(0,l.kt)("br",null),"\nPossible values are ",(0,l.kt)("inlineCode",{parentName:"li"},"DNS")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"NODES_LIST"),".\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"NODES_LIST"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_NODE_NAME")," - Node name used in a cluster.\nIt consists of two parts - nodename@hostname.\nThe first part identifies a node on a single machine and can\nbe any string.\nThe second part identifies the host machine and has to be an\nip address or FQDN of a machine Jellyfish runs on.\nIf you run a cluster using ",(0,l.kt)("inlineCode",{parentName:"li"},"NODES_LIST")," strategy on a single machine\nor in the same docker network and you don't want to use IP addresses or FQDN as hostnames,\nyou can use short names (see ",(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_MODE"),").\nIf you run a cluster using ",(0,l.kt)("inlineCode",{parentName:"li"},"DNS")," strategy, every Jellyfish instance must have ",(0,l.kt)("inlineCode",{parentName:"li"},"nodename")," set to the same value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_MODE")," - distribution mode - can be ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"sname"),".",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"name"),".",(0,l.kt)("br",null),"\nWhen using ",(0,l.kt)("inlineCode",{parentName:"li"},"name"),", your hostname has to be an IP address or FQDN of a machine Jellyfish runs on.\nWhen using ",(0,l.kt)("inlineCode",{parentName:"li"},"sname"),", your hostname can be any string.\nSee our ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/jellyfish-dev/jellyfish/blob/main/docker-compose.yaml"},"docker-compose.yaml"),", which we use in our integration tests for an example."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_COOKIE")," - used to group Jellyfishes in a cluster.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"jellyfish_cookie"),".",(0,l.kt)("br",null),"\nUse different cookies to create multiple clusters on the same machine.",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"li"},"Important"),": cookie does not provide any cryptographic security.\nIts only purpose is to prevent a node from connecting to a cluster with which\nit is not intended to communicate."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_MIN_PORT"),"- minimal port used by Jellyfish when forming a cluster\n(connecting to other Jellyfishes).",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"9000")," when running with Docker.",(0,l.kt)("br",null),"\nOnly available when running with Docker or ",(0,l.kt)("inlineCode",{parentName:"li"},"mix release"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_MAX_PORT"),"- maximal port used by Jellyfish when forming a cluster\n(connecting to other Jellyfishes).",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"9000")," when running with Docker.",(0,l.kt)("br",null),"\nOnly available when running with Docker or ",(0,l.kt)("inlineCode",{parentName:"li"},"mix release"),".")),(0,l.kt)("h6",{id:"distribution-nodes_list-specific"},"Distribution NODES_LIST specific:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_NODES")," - space-separated list of other Jellyfishes to connect to.",(0,l.kt)("br",null),"\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"li"},'""'),".",(0,l.kt)("br",null),"\nExample: ",(0,l.kt)("inlineCode",{parentName:"li"},'JF_DIST_NODES="jellyfish1@127.0.0.1 jellyfish2@127.0.0.1"'),".",(0,l.kt)("br",null),"\nThis list can also include ourselves so that you can pass the same value\nto every Jellyfish.\nNote: Jellyfish connection to other Jellyfish is transitive meaning that\nwhen you connect to one Jellyfish you also connect to all other Jellyfishes\nthis one was connected to.")),(0,l.kt)("h6",{id:"distribution-dns-specific"},"Distribution DNS specific:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_QUERY")," - query sent to DNS to discover other Jellyfishes. ",(0,l.kt)("br",null),"\nReturned list of IPs from DNS is used for creating distribution node name in the format ",(0,l.kt)("inlineCode",{parentName:"li"},"<nodename>@<IP_ADDRESS>"),".  "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JF_DIST_POLLING_INTERVAL")," - DNS polling interval in ms. ",(0,l.kt)("br",null),"\nDefault value is 5000.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can use a single port to form a cluster, even if a cluster consists of\nmore than two Jellyfishes. ")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Besides ports specified using ",(0,l.kt)("inlineCode",{parentName:"p"},"JF_DIST_MIN_PORT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"JF_DIST_MAX_PORT"),", Jellyfish\nalso uses one more service called EPMD that runs on port 4369.\nThis port has to be explicitly exported when running with Docker.\nRead more in the ",(0,l.kt)("a",{parentName:"p",href:"/jellyfish-docs/next/cluster"},"Cluster")," section.")))}h.isMDXComponent=!0}}]);