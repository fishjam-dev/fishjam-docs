"use strict";(self.webpackChunkfishjam_docs=self.webpackChunkfishjam_docs||[]).push([[1742],{38571:(e,n,t)=>{t.d(n,{Ay:()=>o,RM:()=>r});var a=t(74848),i=t(28453);const r=[{value:"Connecting and joining the room",id:"connecting-and-joining-the-room",level:3}];function s(e){const n={a:"a",admonition:"admonition",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["You can learn more about Fishjam architecture in ",(0,a.jsx)(n.a,{href:"/",children:"Fishjam\ndocs"}),". This section provides a\nbrief description aimed at front-end developers"]})}),"\n",(0,a.jsx)(n.p,{children:"Let's introduce some concepts first:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Peer"})," - A peer is a client-side entity that connects to the server to\npublish, subscribe or publish and subscribe to tracks published by components\nor other peers. You can think of it as a participant in a room. At the moment,\nthere is only one type of peer - WebRTC."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Track"})," - An object that represents an audio or video stream. A track can be\nassociated with a local media source, such as a camera or microphone, or a\nremote media source received from another user. Tracks are used to capture,\ntransmit, and receive audio and video data in WebRTC applications."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Room"})," - In Fishjam, a room serves as a holder for peers and components,\nits function varying based on application. From a front-end perspective, this will\nbe probably one meeting or a broadcast."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For a better understanding of these concepts here is an example of a room that\nholds a standard WebRTC conference from a perspective of the User:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Room example",src:t(59501).A+"",width:"1195",height:"1224"})}),"\n",(0,a.jsx)(n.p,{children:"In this example, peers stream multiple video and audio tracks. Peer #1 streams\neven two video tracks (camera and screencast track). You can differentiate\nbetween them by using track metadata. The user gets info about peers and their\ntracks from the server using Fishjam Client. The user is also informed in real\ntime about peers joining/leaving and tracks being added/removed."}),"\n",(0,a.jsx)(n.p,{children:"To keep this tutorial short we'll simplify things a little. Every peer will stream just one\nvideo track."}),"\n",(0,a.jsx)(n.h3,{id:"connecting-and-joining-the-room",children:"Connecting and joining the room"}),"\n",(0,a.jsx)(n.p,{children:"The general flow of connecting to the server and joining the room in a standard\nWebRTC conference setup looks like this:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Connecting and joing the room",src:t(31291).A+"",width:"6158",height:"2195"})}),"\n",(0,a.jsx)(n.p,{children:"The parts that you need to implement are marked in blue and things handled by\nFishjam are marked in red."}),"\n",(0,a.jsx)(n.p,{children:"Firstly, the user logs in. Then your backend authenticates the user and obtains\na peer token. It allows the user to authenticate and join the room in Fishjam\nServer. The backend passes the token to your front-end, and your front-end passes\nit to Fishjam Client. The client establishes the connection with Fishjam\nServer. Then Fishjam Client sets up tracks (camera, microphone) to stream and\njoins the room on Fishjam Server. Finally, your front-end can display the room\nfor the user."}),"\n",(0,a.jsx)(n.p,{children:"For this tutorial we simplified this process a bit - you don't have to implement\na backend or authentication. Fishjam Dashboard will do this for you. It's also\na nice tool to test and play around with Fishjam. The flow with Fishjam Dashboard looks like this:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Connecting and joing the room with dashboard",src:t(22236).A+"",width:"5336",height:"2152"})}),"\n",(0,a.jsx)(n.p,{children:"You can see that the only things you need to implement are interactions with the\nuser and Fishjam Client. This tutorial will show you how to do it."})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},84762:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>o});var a=t(74848),i=t(28453),r=t(11470),s=t(19365);const o=[];function c(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"There are a couple of ways to start the dashboard:"}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(s.A,{value:"main",label:"Up-to-date version",children:(0,a.jsxs)(n.p,{children:["The current version of the dashboard is ready to use and available\n",(0,a.jsx)(n.a,{href:"https://fishjam-dev.github.io/fishjam-dashboard/",children:"here"}),".\nEnsure that it is compatible with your Fishjam server!\nPlease note that this dashboard only supports secure connections (https/wss)\nor connections to localhost. Any insecure requests (http/ws) will be automatically blocked by the browser."]})}),(0,a.jsxs)(s.A,{value:"docker",label:"Docker container",children:[(0,a.jsx)(n.p,{children:"The dashboard is also published as a docker image, you can pull it using:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker pull ghcr.io/fishjam-dev/fishjam-dashboard:v0.1.2\n"})})]}),(0,a.jsx)(s.A,{value:"repo",label:"Official repository",children:(0,a.jsxs)(n.p,{children:["You can also clone our ",(0,a.jsx)(n.a,{href:"https://github.com/fishjam-dev/fishjam-dashboard",children:"repo"}),"\nand run dashboard locally"]})})]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},91403:(e,n,t)=>{t.d(n,{Ay:()=>o,RM:()=>r});var a=t(74848),i=t(28453);const r=[];function s(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"For testing, we'll run the Fishjam Media Server locally using Docker image:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'docker run -p 50000-50050:50000-50050/udp \\\n           -p 5002:5002/tcp \\\n           -e FJ_CHECK_ORIGIN=false \\\n           -e FJ_HOST=<your ip address>:5002 \\\n           -e FJ_PORT="5002" \\\n           -e FJ_WEBRTC_USED=true \\\n           -e FJ_WEBRTC_TURN_PORT_RANGE=50000-50050 \\\n           -e FJ_WEBRTC_TURN_IP=<your ip address> \\\n           -e FJ_WEBRTC_TURN_LISTEN_IP=0.0.0.0 \\\n           -e FJ_SERVER_API_TOKEN=development \\\n           ghcr.io/fishjam-dev/fishjam:0.6.2\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Make sure to set ",(0,a.jsx)(n.code,{children:"FJ_WEBRTC_TURN_IP"})," and ",(0,a.jsx)(n.code,{children:"FJ_HOST"})," to your local IP address. Without it, the mobile device won't be able to connect to the Fishjam."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"To check your local IP you can use this handy command (Linux/macOS):"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}'\n"})})]})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},44267:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>j,frontMatter:()=>h,metadata:()=>u,toc:()=>g});var a=t(74848),i=t(28453),r=t(61568),s=t(11470),o=t(19365),c=t(38571),l=t(91403),d=t(84762);const h={title:"React Native"},p="React Native Minimal Working Example",u={id:"tutorials/react-native",title:"React Native",description:"This guide expects that you have read Basic Concepts and Example Scenarios",source:"@site/docs/tutorials/react-native.mdx",sourceDirName:"tutorials",slug:"/tutorials/react-native",permalink:"/fishjam-docs/next/tutorials/react-native",draft:!1,unlisted:!1,editUrl:"https://github.com/fishjam-dev/fishjam-docs/docs/tutorials/react-native.mdx",tags:[],version:"current",frontMatter:{title:"React Native"},sidebar:"mainSidebar",previous:{title:"Simple React App",permalink:"/fishjam-docs/next/tutorials/simple-react-app"},next:{title:"Server SDK Examples",permalink:"/fishjam-docs/next/tutorials/server_sdk_examples"}},m={},g=[{value:"What you&#39;ll learn",id:"what-youll-learn",level:2},{value:"What do you need",id:"what-do-you-need",level:2},{value:"Fishjam architecture",id:"fishjam-architecture",level:2},...c.RM,{value:"Setup",id:"setup",level:2},{value:"Start the Fishjam Dashboard",id:"start-the-fishjam-dashboard",level:3},...l.RM,{value:"Start the dashboard web front-end",id:"start-the-dashboard-web-front-end",level:3},...d.RM,{value:"Create React Native / Expo project",id:"create-react-native--expo-project",level:3},{value:"Add dependencies",id:"add-dependencies",level:3},{value:"Native permissions configuration",id:"native-permissions-configuration",level:3},{value:"Add source components",id:"add-source-components",level:3},{value:"Screens",id:"screens",level:2},{value:"ConnectScreen",id:"connectscreen",level:2},{value:"Connecting to the server",id:"connecting-to-the-server",level:3},{value:"Camera permissions (Android only)",id:"camera-permissions-android-only",level:3},{value:"Starting the camera",id:"starting-the-camera",level:3},{value:"Joining the room",id:"joining-the-room",level:3},{value:"RoomScreen",id:"roomscreen",level:2},{value:"Displaying video tracks",id:"displaying-video-tracks",level:3},{value:"First test",id:"first-test",level:3},{value:"Gracefully leaving the room",id:"gracefully-leaving-the-room",level:3},{value:"Summary",id:"summary",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"react-native-minimal-working-example",children:"React Native Minimal Working Example"}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["This guide expects that you have read ",(0,a.jsx)(n.a,{href:"/fishjam-docs/next/introduction/basic_concepts",children:(0,a.jsx)(n.code,{children:"Basic Concepts"})})," and ",(0,a.jsx)(n.a,{href:"/fishjam-docs/next/introduction/example_scenarios",children:(0,a.jsx)(n.code,{children:"Example Scenarios"})})]}),(0,a.jsx)(n.p,{children:"This tutorial is compatible with react-native-client-sdk version 0.1.6"})]}),"\n",(0,a.jsx)(n.h2,{id:"what-youll-learn",children:"What you'll learn"}),"\n",(0,a.jsxs)(n.p,{children:["This tutorial will guide you through creating your first React Native / Expo\nproject which uses Fishjam client. By the end of the tutorial, you'll have a\nworking application that connects to an instance of ",(0,a.jsx)(n.a,{href:"https://github.com/fishjam-dev/fishjam",children:"Fishjam Server"})," using WebRTC,\nstreaming and receiving multimedia."]}),"\n",(0,a.jsx)(r.x,{url:"/img/tutorials/rn_full_app.gif"}),"\n",(0,a.jsx)(n.h2,{id:"what-do-you-need",children:"What do you need"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["a little bit of experience in creating apps with React Native and/or Expo -\nrefer to the ",(0,a.jsx)(n.a,{href:"https://reactnative.dev/docs/getting-started",children:"React Native\nGuide"})," or ",(0,a.jsx)(n.a,{href:"https://docs.expo.dev/",children:"Expo\nGuide"})," to learn more"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"fishjam-architecture",children:"Fishjam architecture"}),"\n",(0,a.jsx)(c.Ay,{}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.h3,{id:"start-the-fishjam-dashboard",children:"Start the Fishjam Dashboard"}),"\n",(0,a.jsx)(l.Ay,{}),"\n",(0,a.jsx)(n.h3,{id:"start-the-dashboard-web-front-end",children:"Start the dashboard web front-end"}),"\n",(0,a.jsx)(d.Ay,{}),"\n",(0,a.jsx)(n.h3,{id:"create-react-native--expo-project",children:"Create React Native / Expo project"}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["If you want to skip creating and setuping app clone this ",(0,a.jsx)(n.a,{href:"https://github.com/karkakol/react-native-fishjam-example-begin-0.1.6",children:"repo"}),". Then continue from this ",(0,a.jsx)(n.a,{href:"#screens",children:"step"}),"."]}),(0,a.jsxs)(n.p,{children:["If you want ready to use app just clone and run this ",(0,a.jsx)(n.a,{href:"https://github.com/karkakol/react-native-fishjam-example-end-0.1.6",children:"repo"}),". Remember to change your ",(0,a.jsx)(n.a,{href:"https://github.com/karkakol/react-native-fishjam-example-end-0.1.6/blob/5ef7d7ac6146d3d631598c2f6168d5dc591a1377/screens/Connect.tsx#L22",children:"server url"}),"."]})]}),"\n",(0,a.jsx)(n.p,{children:"Firstly create a brand new project and change directory."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"react-native",label:"React Native",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx react-native@latest init ReactNativeFishjamExample && cd ReactNativeFishjamExample\n"})})}),(0,a.jsx)(o.A,{value:"expo-bare",label:"Expo Bare workflow",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx react-native init ReactNativeFishjamExample --template react-native-template-typescript && cd ReactNativeFishjamExample\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"add-dependencies",children:"Add dependencies"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Please make sure to install or update ",(0,a.jsx)(n.code,{children:"expo"})," to version ",(0,a.jsx)(n.code,{children:"^50.0.0"})]})}),"\n",(0,a.jsxs)(n.p,{children:["You have two options here. You can follow configuration instructions for\nReact Native (Expo Bare workflow is a React Native project after all) or if\nyou're using ",(0,a.jsx)(n.code,{children:"expo prebuild"})," command to set up native code you can add our Expo\nplugin."]}),"\n",(0,a.jsxs)(n.p,{children:["Just add it to ",(0,a.jsx)(n.code,{children:"app.json"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:"title:app.json",children:'{\n  "expo": {\n    "name": "example",\n    //...\n    "plugins": ["@fishjam-dev/react-native-membrane-webrtc"]\n  }\n}\n'})}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"react-native",label:"React Native",children:[(0,a.jsxs)(n.p,{children:["In order for this module to work, you'll need to also add ",(0,a.jsx)(n.code,{children:"expo"})," package. The\npackage introduces a small footprint, but is necessary as the Fishjam client\npackage is built as Expo module."]}),(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"npm",label:"npm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npx install-expo-modules@latest\nnpm install @fishjam-dev/react-native-client-sdk\n"})})}),(0,a.jsx)(o.A,{value:"Yarn",label:"Yarn",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npx install-expo-modules@latest\nyarn add @fishjam-dev/react-native-client-sdk\n"})})})]})]}),(0,a.jsx)(o.A,{value:"expo-bare",label:"Expo Bare workflow",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx install-expo-modules@latest\nnpx expo install @fishjam-dev/react-native-client-sdk\n"})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Run ",(0,a.jsx)(n.code,{children:"pod install"})," in the /ios directory to install the new pods"]})}),"\n",(0,a.jsx)(n.h3,{id:"native-permissions-configuration",children:"Native permissions configuration"}),"\n",(0,a.jsx)(n.p,{children:"In order to let the application access microphone and camera, you'll need to add some native configuration:"}),"\n",(0,a.jsx)(n.p,{children:"You need to at least set up camera permissions."}),"\n",(0,a.jsxs)(n.p,{children:["On Android add to your ",(0,a.jsx)(n.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'  <uses-permission android:name="android.permission.CAMERA"/>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For audio you'll need the ",(0,a.jsx)(n.code,{children:"RECORD_AUDIO"})," permission:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'  <uses-permission android:name="android.permission.RECORD_AUDIO"/>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["On iOS you must set ",(0,a.jsx)(n.code,{children:"NSCameraUsageDescription"})," in ",(0,a.jsx)(n.code,{children:"Info.plist"})," file. This value is a description that is shown when iOS asks user\nfor camera permission."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title=ios/fishjam-dashboard/Info.plist",children:"<key>NSCameraUsageDescription</key>\n<string> \ud83d\ude4f \ud83c\udfa5 </string>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, for audio there is ",(0,a.jsx)(n.code,{children:"NSMicrophoneUsageDescription"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title=ios/fishjam-dashboard/Info.plist",children:"<key>NSMicrophoneUsageDescription</key>\n<string> \ud83d\ude4f \ud83c\udfa4 </string>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We also suggest setting background mode to ",(0,a.jsx)(n.code,{children:"audio"})," so that the app doesn't\ndisconnect when it's in the background:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title=ios/fishjam-dashboard/Info.plist",children:"<key>UIBackgroundModes</key>\n<array>\n  <string>audio</string>\n</array>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Screencast requires additional configuration, you can find the details ",(0,a.jsx)(n.a,{href:"https://github.com/fishjam-dev/react-native-client-sdk#ios",children:"here"}),". To keep this tutorial simple, we will skip this step."]}),"\n",(0,a.jsx)(n.h3,{id:"add-source-components",children:"Add source components"}),"\n",(0,a.jsx)(n.p,{children:"For your convenience, we've prepared some files with nice-looking components\nuseful for following this tutorial. Feel free to use standard React Native components or your own components though!"}),"\n",(0,a.jsxs)(n.p,{children:["In order to use those files, you need to unzip them and place both folders in your project directory (the one where your ",(0,a.jsx)(n.code,{children:"package.json"})," is located)."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(93358).A+"",children:"Download resources"})}),"\n",(0,a.jsx)(n.p,{children:"Don't forget to install additional packages which are mandatory to make our components work properly."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx expo install @expo/vector-icons expo-camera@14.0.x expo-font @expo-google-fonts/noto-sans @react-navigation/native-stack\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsxs)(n.em,{children:["You'll also need to setup and install ",(0,a.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started",children:"Reanimated library (3.3.0)"}),", ",(0,a.jsx)(n.a,{href:"https://reactnavigation.org/docs/getting-started",children:"React Navigation (6.1.7)"})," for bare react native project. Also setup ",(0,a.jsx)(n.a,{href:"https://github.com/expo/expo/tree/sdk-50/packages/expo-camera",children:"Expo Camera (14.0.6)"}),"."]})})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Run ",(0,a.jsx)(n.code,{children:"pod install"})," in the /ios directory to install the new pods"]})}),"\n",(0,a.jsx)(n.h2,{id:"screens",children:"Screens"}),"\n",(0,a.jsx)(n.p,{children:"For managing screens we will use React Navigation library, but feel free to pick whatever suits you.\nOur app will consist of two screens:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ConnectScreen"})," will allow a user to type in, paste or scan a peer token and connect to the room"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RoomScreen"})," will show room participants with their video tracks"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/App.tsx"',children:'import React from "react";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): React.JSX.Element {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Connect" component={ConnectScreen} />\n        <Stack.Screen name="Room" component={RoomScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"connectscreen",children:"ConnectScreen"}),"\n",(0,a.jsxs)(n.p,{children:["The UI of the ",(0,a.jsx)(n.code,{children:"ConnectScreen"})," consists of a simple text input and a few buttons.\nThe flow for this screen is simple:\nthe user either copies the peer token from the\ndashboard or scans it with a QR code scanner and presses Connect button.\nThe QR code scanner is provided by our components library and it's completely optional,\njust for convenience."]}),"\n",(0,a.jsx)(n.p,{children:"The code for the UI looks like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'import React, { useState } from "react";\nimport { View, StyleSheet } from "react-native";\nimport { NavigationProp } from "@react-navigation/native";\nimport QRCodeScanner from \'../components/QRCodeScanner\';\nimport Button from \'../components/Button\';\nimport TextInput from \'../components/TextInput\';\n\ninterface ConnectScreenProps {\n  navigation: NavigationProp<any>;\n}\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): React.JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      <Button\n        onPress={() => {\n          /* to be filled */\n        }}\n        title="Connect"\n        disabled={!peerToken}\n      />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: "center",\n    backgroundColor: "#BFE7F8",\n    padding: 24,\n    rowGap: 24,\n  },\n});\n\nexport default ConnectScreen;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"connecting-to-the-server",children:"Connecting to the server"}),"\n",(0,a.jsx)(n.p,{children:"Once the UI is ready, let's implement the logic responsible for connecting to the server."}),"\n",(0,a.jsxs)(n.p,{children:["Firstly wrap your app with ",(0,a.jsx)(n.code,{children:"JelyfishContextProvider"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/App.tsx"',children:'import React from "react";\n// highlight-next-line\nimport { FishjamContextProvider } from "@fishjam-dev/react-native-client-sdk";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): React.JSX.Element {\n  return (\n    // highlight-next-line\n    <FishjamContextProvider>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name="Connect" component={ConnectScreen} />\n          <Stack.Screen name="Room" component={RoomScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      // highlight-next-line\n    </FishjamContextProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then in the ",(0,a.jsx)(n.code,{children:"ConnectScreen"})," use the ",(0,a.jsx)(n.code,{children:"useFishjamClient"})," hook to connect to the\nserver. Simply call the ",(0,a.jsx)(n.code,{children:"connect"})," method with your Fishjam server URL and the\npeer token. The ",(0,a.jsx)(n.code,{children:"connect"})," function establishes a connection with the Fishjam server\nvia web socket and authenticates the peer."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'// highlight-next-line\nimport { useFishjamClient } from "@fishjam-dev/react-native-client-sdk";\nimport { NavigationProp } from "@react-navigation/native";\n\ninterface ConnectScreenProps {\n  navigation: NavigationProp<any>;\n}\n\n// This is the address of the Fishjam backend. Change the local IP to yours. We\n// strongly recommend setting this as an environment variable, we hardcoded it here\n// for simplicity.\n// If you use secure connection with your Fishjam Media Server change ws to wss in this variable.\n// highlight-next-line\nconst FISHJAM_URL = "ws://X.X.X.X:5002/socket/peer/websocket";\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): React.JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  // highlight-next-line\n  const { connect } = useFishjamClient();\n\n  // highlight-start\n  const connectToRoom = async () => {\n    try {\n      await connect(FISHJAM_URL, peerToken.trim());\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n  // highlight-end\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      // highlight-next-line\n      <Button onPress={connectToRoom} title="Connect" disabled={!peerToken} />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\n// ...\n'})}),"\n",(0,a.jsx)(n.h3,{id:"camera-permissions-android-only",children:"Camera permissions (Android only)"}),"\n",(0,a.jsx)(n.p,{children:"To start the camera we need to ask the user for permission first. We'll use a\nstandard React Native module for this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'\nimport {\n  View,\n  StyleSheet,\n//highlight-start\n  type Permission,\n  PermissionsAndroid,\n  Platform,\n//highlight-end\n} from "react-native";\n\n\n\n// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): React.JSX.Element {\n  // ...\n\n  // highlight-start\n  const grantedCameraPermissions = async () => {\n    if (Platform.OS === "ios") return true;\n    const granted = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.CAMERA as Permission\n    );\n    if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\n      console.error("Camera permission denied");\n      return false;\n    }\n    return true;\n  };\n  // highlight-end\n\n  const connectToRoom = async () => {\n    try {\n      await connect(FISHJAM_URL, peerToken.trim());\n\n      // highlight-start\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n      // highlight-end\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,a.jsx)(n.h3,{id:"starting-the-camera",children:"Starting the camera"}),"\n",(0,a.jsxs)(n.p,{children:["Fishjam Client provides a handy hook for managing the camera: ",(0,a.jsx)(n.code,{children:"useCamera"}),".\nNot only it can start a camera but also toggle it, manage its state, simulcast and bandwidth settings, and switch between multiple sources.\nAlso when starting the camera you can provide multiple different settings such as\nresolution, quality, and metadata.\nIn this example though we'll simply turn it\non to stream the camera to the dashboard with default settings"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'import {\n  useFishjamClient,\n  // highlight-next-line\n  useCamera,\n} from "@fishjam-dev/react-native-client-sdk";\n\n// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): React.JSX.Element {\n  // ...\n\n  // highlight-next-line\n  const { startCamera } = useCamera();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(FISHJAM_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      // highlight-next-line\n      await startCamera();\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,a.jsx)(n.h3,{id:"joining-the-room",children:"Joining the room"}),"\n",(0,a.jsxs)(n.p,{children:["The last step of connecting to the room would be actually joining it so\nthat your camera track is visible to the other users.\nTo do this simply use the ",(0,a.jsx)(n.code,{children:"join"})," function\nfrom the ",(0,a.jsx)(n.code,{children:"useFishjamClient"})," hook."]}),"\n",(0,a.jsx)(n.p,{children:"You can also provide some user metadata when joining.\nMetadata can be anything and is forwarded to the other participants as is.\nIn our case, we pass a username."}),"\n",(0,a.jsx)(n.p,{children:"After joining the room we navigate to the next screen: Room screen."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): React.JSX.Element {\n  // highlight-next-line\n  const { connect, join } = useFishjamClient();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(FISHJAM_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      await startCamera();\n\n      // highlight-next-line\n      await join({ name: "Mobile RN Client" });\n      // highlight-next-line\n      navigation.navigate("Room");\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,a.jsx)(n.h2,{id:"roomscreen",children:"RoomScreen"}),"\n",(0,a.jsx)(n.h3,{id:"displaying-video-tracks",children:"Displaying video tracks"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Room"})," screen has a couple of responsibilities:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"it displays your own video.\nNote that it's taken directly from your camera i.e. we don't send it to the JF and get it back so other participants might see you a little bit differently"}),"\n",(0,a.jsx)(n.li,{children:"it presents current room state so participants list, their video tiles, etc."}),"\n",(0,a.jsx)(n.li,{children:"it allows you to leave a meeting"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To get information about all participants (also the local one) in the room use\n",(0,a.jsx)(n.code,{children:"usePeers()"})," hook from Fishjam Client. The hook returns all the participants\nwith their ids, tracks and metadata. When a new participant joins or any\nparticipant leaves or anything else changes, the hook updates with the new\ninformation."]}),"\n",(0,a.jsxs)(n.p,{children:["To display video tracks Fishjam Client comes with a dedicated component for\ndisplaying a video track: ",(0,a.jsx)(n.code,{children:"<VideoRenderer>"}),". It takes a track id as a prop (it\nmay be a local or remote track) and, as any other ",(0,a.jsx)(n.code,{children:"<View>"})," in react, a style.\nstyle property gives a ",(0,a.jsx)(n.a,{href:"https://reactnative.dev/docs/stylesheet",children:"lot of possibilities"}),". You can even animate your track!"]}),"\n",(0,a.jsx)(n.p,{children:"So, let's display all the participants in the simplest way possible:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:'import React from "react";\nimport { View, StyleSheet } from "react-native";\nimport { NavigationProp } from "@react-navigation/native";\n// highlight-start\nimport {\n  usePeers,\n  VideoRendererView,\n} from "@fishjam-dev/react-native-client-sdk";\n// highlight-end\n\ninterface RoomScreenProps {\n  navigation: NavigationProp<any>;\n}\n\nfunction RoomScreen({ navigation }: RoomScreenProps): React.JSX.Element {\n  // highlight-next-line\n  const peers = usePeers();\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.videoContainer}>\n        // highlight-start\n        {peers.map((peer) =>\n          peer.tracks[0] ? (\n            <VideoRendererView\n              trackId={peer.tracks[0].id}\n              style={styles.video}\n            />\n          ) : null\n        )}\n        // highlight-end\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "space-between",\n    backgroundColor: "#F1FAFE",\n    padding: 24,\n  },\n  videoContainer: {\n    flexDirection: "row",\n    gap: 8,\n    flexWrap: "wrap",\n  },\n  video: { width: 200, height: 200 },\n});\n\nexport default RoomScreen;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"first-test",children:"First test"}),"\n",(0,a.jsx)(n.p,{children:"Now the app is ready for the first test."}),"\n",(0,a.jsx)(n.p,{children:"This video shows how to connect to Fishjam dashboard, create room and peers."}),"\n",(0,a.jsx)(r.x,{url:"/react_native/dashboard_connect_to_media_server.gif"}),"\n",(0,a.jsx)(n.p,{children:"This image shows how you can obtain peer token."}),"\n",(0,a.jsx)(r.x,{url:"/react_native/dashboard_peer_token.png"}),"\n",(0,a.jsx)(n.p,{children:"For physical devices, it would be easier to scan a QR code to input the peer token into the app. For virtual devices, it is more convenient to copy the token to the clipboard and then paste it."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Don't connect with the same peer simultaneously from dashboard and mobile app."})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Ios simulator does not support camera, but it will display remote tracks. It is strongly recommended to use physical device or android emulator where you can see your camera preview."})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"Due to react-native hot-reload feature sometimes following error may occur in console logs:"}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Error while connecting [Error: WebSocket was closed: 1000 peer already connected]"}),"."]}),(0,a.jsx)(n.p,{children:"To fix it just kill your app and run it again. Later we will add disconnect button and it will solve this issue."})]}),"\n",(0,a.jsx)(n.p,{children:"Before launching your app, start Metro:"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"npm",label:"npm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm start\n"})})}),(0,a.jsx)(o.A,{value:"Yarn",label:"Yarn",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yarn start\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"To launch your app, you can use the following command:"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"npm",label:"npm",children:(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"ios",label:"ios",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ios && pod install && cd .. && npm run ios\n"})})}),(0,a.jsx)(o.A,{value:"android",label:"android",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run android\n"})})})]})}),(0,a.jsx)(o.A,{value:"Yarn",label:"Yarn",children:(0,a.jsxs)(s.A,{children:[(0,a.jsx)(o.A,{value:"ios",label:"ios",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ios && pod install && cd .. && yarn ios\n"})})}),(0,a.jsx)(o.A,{value:"android",label:"android",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yarn android\n"})})})]})})]}),"\n",(0,a.jsx)(n.p,{children:"If everything went well you should see\na preview from your camera in app."}),"\n",(0,a.jsx)(r.x,{url:"/react_native/room_screen_with_camera_only.gif",height:720}),"\n",(0,a.jsx)(n.p,{children:"Now onto the second part:\ndisplaying the streams from other participants."}),"\n",(0,a.jsxs)(n.p,{children:["This gif shows how to add a fake peer that shares a video track in the dashboard (remember to check the ",(0,a.jsx)(n.code,{children:"Attach metadata"})," checkbox):"]}),"\n",(0,a.jsx)(r.x,{url:"/react_native/add_track_in_fishjam.gif"}),"\n",(0,a.jsx)(n.p,{children:"It should show up in the Room screen automatically:"}),"\n",(0,a.jsx)(r.x,{url:"/react_native/unstyled_track_joining_from_dashboard.gif",height:720}),"\n",(0,a.jsx)(n.p,{children:"Let's utilize the provided components to implement basic styling and layout for organizing video tracks in a visually appealing grid."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:"// highlight-start\nimport React, {useMemo} from 'react';\nimport VideosGrid from '../components/VideosGrid.tsx';\n// highlight-end\n\n// ...\n\nfunction RoomScreen({ navigation }: RoomScreenProps): React.JSX.Element {\n  const peers = usePeers();\n  // highlight-start\n  const tracks = useMemo(() =>\n    peers.flatMap(peer =>\n      peer.tracks.filter(\n        t => t.metadata.type !== 'audio' && (t.metadata.active ?? true),\n      ),\n  ), [peers]);\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      // highlight-start\n      <VideosGrid\n        tracks={tracks}\n      />\n      // highlight-end\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"gracefully-leaving-the-room",children:"Gracefully leaving the room"}),"\n",(0,a.jsxs)(n.p,{children:["To leave a room we'll add a button for the user. When the user clicks it, we\ngracefully leave the room, close the server connection and go back to the\n",(0,a.jsx)(n.code,{children:"Connectscreen"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["For leaving the room and closing the server connection you can use the ",(0,a.jsx)(n.code,{children:"cleanUp"})," method from the ",(0,a.jsx)(n.code,{children:"useFishjamClient()"})," hook."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:'// ...\n\nimport {\n  usePeers,\n  VideoRendererView,\n  // highlight-next-line\n  useFishjamClient,\n} from "@fishjam-dev/react-native-client-sdk";\n// highlight-next-line\nimport InCallButton from \'../components/InCallButton.tsx\';\n\n// ...\n\nfunction RoomScreen({ navigation }: RoomScreenProps): React.JSX.Element {\n  const peers = usePeers();\n  // highlight-start\n  const { cleanUp } = useFishjamClient();\n\n  const onDisconnectPress = () => {\n    cleanUp();\n    navigation.goBack();\n  };\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <VideosGrid\n        tracks={tracks}\n      />\n      // highlight-start\n      <InCallButton\n        type="disconnect"\n        iconName="phone-hangup"\n        onPress={onDisconnectPress}\n      />\n      // highlight-end\n    </View>\n  );\n}\n\n// ...\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now your app should look like this:"}),"\n",(0,a.jsx)(r.x,{url:"/react_native/track_joining_from_dashboard.gif",height:720}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"Congrats on finishing your first Fishjam mobile application! In this tutorial,\nyou've learned how to make a basic Fishjam client application that streams and\nreceives video tracks with WebRTC technology."}),"\n",(0,a.jsx)(n.p,{children:"But this was just the beginning. Fishjam Client supports much more than just\nstreaming camera: it can also stream audio, screencast your device's screen,\nconfigure your camera and audio devices, detect voice activity, control\nsimulcast, bandwidth and encoding settings, show camera preview, display WebRTC\nstats and more to come. Check out our other tutorials to learn about those\nfeatures."}),"\n",(0,a.jsxs)(n.p,{children:["You can also take a look at our fully featured ",(0,a.jsx)(n.a,{href:"https://github.com/fishjam-dev/react-native-membrane-webrtc/tree/master/example",children:"Videoroom Demo\nexample"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Videoroom Demo",src:t(33484).A+"",width:"720",height:"720"})})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},61568:(e,n,t)=>{t.d(n,{x:()=>s});t(96540);var a=t(86025),i=t(21122),r=t(74848);const s=e=>{let{url:n,height:t,alt:s}=e;return(0,r.jsx)("p",{style:{display:"flex",justifyContent:"center"},children:(0,r.jsx)(i.A,{height:t,alt:s,sources:{light:(0,a.A)(n),dark:(0,a.A)(n)}})})}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var a=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>w});var a=t(96540),i=t(18215),r=t(23104),s=t(56347),o=t(205),c=t(57485),l=t(31682),d=t(89466);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=p(e),[s,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[l,h]=m({queryString:t,groupId:i}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,d.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),j=(()=>{const e=l??g;return u({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{j&&c(j)}),[j]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),x(e)}),[h,x,r]),tabValues:r}}var x=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function v(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),i=o[t].value;i!==a&&(l(n),s(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...r,className:(0,i.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...e,...n}),(0,f.jsx)(y,{...e,...n})]})}function w(e){const n=(0,x.A)();return(0,f.jsx)(b,{...e,children:h(e.children)},String(n))}},93358:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/files/resources-9582491f4fd41941002e49e46f6ff117.zip"},31291:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/connection-1c1c4ee125e1e5dec0fcfad61e0174a8.png"},22236:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/dashboard_connection-06d1d36ef4f41cc0672c2df0511af63a.png"},59501:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/room_example-e9c6acb4df6063de5a8978dc6710b909.png"},33484:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/videoroom-b9c2dd933b2f8d5061aa5b5c53c19a3d.gif"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);