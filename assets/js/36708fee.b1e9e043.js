"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[8285],{9228:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var s=r(74848),i=r(28453),l=r(11470),t=r(19365);const o={},a="Installation",c={id:"getting_started/installation",title:"Installation",description:"There are two ways of running Jellyfish:",source:"@site/versioned_docs/version-0.2.1/getting_started/installation.md",sourceDirName:"getting_started",slug:"/getting_started/installation",permalink:"/jellyfish-docs/0.2.1/getting_started/installation",draft:!1,unlisted:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/versioned_docs/version-0.2.1/getting_started/installation.md",tags:[],version:"0.2.1",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Example Scenarios",permalink:"/jellyfish-docs/0.2.1/introduction/example_scenarios"},next:{title:"Architecture",permalink:"/jellyfish-docs/0.2.1/getting_started/architecture"}},d={},h=[{value:"Building from source",id:"building-from-source",level:2},{value:"Running with Docker",id:"running-with-docker",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Required in production:",id:"required-in-production",level:4},{value:"Optional:",id:"optional",level:4},{value:"Distribution:",id:"distribution",level:4}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"There are two ways of running Jellyfish:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"building from source (requires Elixir and native dependencies)"}),"\n",(0,s.jsx)(n.li,{children:"using Jellyfish Docker images"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"At the moment, Jellyfish doesn't provide pre-built binaries."}),"\n",(0,s.jsx)(n.h2,{id:"building-from-source",children:"Building from source"}),"\n",(0,s.jsx)(n.p,{children:"Make sure to have both Elixir and Rust installed. Check the links below for instructions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://elixir-lang.org/install.html",children:"Elixir"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://rustup.rs",children:"Rust"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Clone the Jellyfish repo"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"git clone https://github.com/jellyfish-dev/jellyfish.git\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Install native dependencies"})}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsxs)(t.A,{value:"mac-intel",label:"macOS Intel",default:!0,children:[(0,s.jsxs)(n.p,{children:["These instructions assume you have Homebrew installed. You can get it ",(0,s.jsx)("a",{href:"https://brew.sh",children:"here"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'brew install srtp libnice clang-format ffmpeg opus pkg-config\nexport LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"\nexport CFLAGS="-I/usr/local/opt/openssl@1.1/include/"\nexport CPPFLAGS="-I/usr/local/opt/openssl@1.1/include/"\nexport PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"\n'})})]}),(0,s.jsxs)(t.A,{value:"mac-m1",label:"macOS Apple Silicon",default:!0,children:[(0,s.jsxs)(n.p,{children:["These instructions assume you have Homebrew installed. You can get it ",(0,s.jsx)("a",{href:"https://brew.sh",children:"here"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"brew install srtp libnice clang-format ffmpeg opus\nexport C_INCLUDE_PATH=/opt/homebrew/Cellar/libnice/0.1.18/include:/opt/homebrew/Cellar/opus/1.3.1/include:/opt/homebrew/Cellar/openssl@1.1/1.1.1l_1/include\nexport LIBRARY_PATH=/opt/homebrew/Cellar/opus/1.3.1/lib\nexport PKG_CONFIG_PATH=/opt/homebrew/Cellar/openssl@1.1/1.1.1l_1/lib/pkgconfig/\n"})})]}),(0,s.jsx)(t.A,{value:"ubuntu",label:"Ubuntu",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"sudo apt install pkg-config libsrtp2-dev libnice-dev libavcodec-dev libavformat-dev libavutil-dev libopus-dev libfdk-aac-dev\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Install elixir dependencies"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mix deps.get\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run the server in development"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mix phx.server\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create a binary"})}),"\n",(0,s.jsx)(n.p,{children:"You can also create Jellyfish binary with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MIX_ENV=prod mix release\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then follow instructions printed in your terminal."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The difference between running with ",(0,s.jsx)(n.code,{children:"mix phx.server"})," and generating target\nbinary is that the latter is prepared for running in production so e.g.\nit includes some Erlang Virtual Machine tweaks.\nJellyfish Dockerfile always uses ",(0,s.jsx)(n.code,{children:"mix release"})," under the hood."]})}),"\n",(0,s.jsx)(n.h2,{id:"running-with-docker",children:"Running with Docker"}),"\n",(0,s.jsxs)(n.p,{children:["Docker images are built for production which means that you always\nneed to set a couple of ",(0,s.jsx)(n.a,{href:"#environment-variables",children:"environment variables"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"An example docker command running bare Jellyfish HTTP service locally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -p 8080:8080/tcp -e JF_HOST=localhost:8080 -e JF_SERVER_API_TOKEN=token ghcr.io/jellyfish-dev/jellyfish:0.2.1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that in real case scenarios, docker commands depend on peers/components you are going to use.\nTherefore, we don't present them here but rather in each peer/component's documentation.\nAs an example see ",(0,s.jsx)(n.a,{href:"./peers/webrtc#example-docker-commands",children:"WebRTC Peer"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For the full list of Jellyfish Docker images, ",(0,s.jsx)(n.a,{href:"https://github.com/jellyfish-dev/jellyfish/pkgs/container/jellyfish",children:"see this page"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Instead of passing environmental variables manually, you can use the ",(0,s.jsx)(n.code,{children:"--env-file ./env-file"})," flag,\nwhere the ",(0,s.jsx)(n.code,{children:"env-file"})," is a file containing the variables that the image expects,\nsee example file ",(0,s.jsx)(n.code,{children:".env.sample"})," in the Jellyfish repository."]})}),"\n",(0,s.jsx)(n.h2,{id:"environment-variables",children:"Environment variables"}),"\n",(0,s.jsx)(n.p,{children:"Environment variables are split into two groups:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"general ones - presented below"}),"\n",(0,s.jsxs)(n.li,{children:["peer/component-specific - each Peer and Component can expose its own environment variables.\nThey are always listed in a Peer/Component description.\nSee the list of ",(0,s.jsx)(n.a,{href:"/jellyfish-docs/0.2.1/getting_started/peers/webrtc",children:"Peers"})," and ",(0,s.jsx)(n.a,{href:"/jellyfish-docs/0.2.1/getting_started/components/hls",children:"Components"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Below there are general, Jellyfish environment variables.\nIf you are running Jellyfish in development, you don't need to\nset any of them."}),"\n",(0,s.jsx)(n.h4,{id:"required-in-production",children:"Required in production:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_SERVER_API_TOKEN"})," - token for authorizing HTTP requests.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"development"})," for development builds."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_HOST"})," - defines how Jellyfish should be seen from the outside.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"JF_IP:JF_PORT"}),".",(0,s.jsx)("br",{}),"\nIt can be in the form of ",(0,s.jsx)(n.code,{children:"ip:port"}),", ",(0,s.jsx)(n.code,{children:"domain:port"})," or simply ",(0,s.jsx)(n.code,{children:"domain"}),".\nUseful when hosting Jellyfish behind proxy.\nIt is returned e.g. when creating a new room.\nWhen running with Docker, ",(0,s.jsx)(n.code,{children:"JF_IP"})," is set to ",(0,s.jsx)(n.code,{children:"0.0.0.0"}),"\nmaking the default value of ",(0,s.jsx)(n.code,{children:"JF_HOST"})," incorrect.\nTherefore, for Docker, you have to set ",(0,s.jsx)(n.code,{children:"JF_HOST"})," manually.\nFor running Docker locally, it can simply be ",(0,s.jsx)(n.code,{children:"localhost:8080"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"optional",children:"Optional:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_IP"})," - an ip address to run the HTTP server on.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"127.0.0.1"})," when running from source or using ",(0,s.jsx)(n.code,{children:"mix release"}),", or ",(0,s.jsx)(n.code,{children:"0.0.0.0"})," for Docker."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_PORT"})," - port to run the HTTP server on.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"5002"})," for development builds and ",(0,s.jsx)(n.code,{children:"8080"})," for production builds (",(0,s.jsx)(n.code,{children:"mix release"})," or Docker)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_SECRET_KEY_BASE"})," - used to sign/encrypt tokens generated for Peers.\nGenerated if not provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_CHECK_ORIGIN"})," - defines if Jellyfish will check the origin of incoming requests and socket connection. ",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"true"}),".",(0,s.jsx)("br",{}),"\nPossible values are ",(0,s.jsx)(n.code,{children:"true"}),", ",(0,s.jsx)(n.code,{children:"false"})," or a space-separated list of allowed origins (wildcards are allowed). ",(0,s.jsx)("br",{}),"\nExample: ",(0,s.jsx)(n.code,{children:'JF_CHECK_ORIGIN="https://example.com //another.com:888 //*.other.com"'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_OUTPUT_BASE_PATH"})," - a base path where Jellyfish will save its artifacts.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"./jellyfish_output/"}),".",(0,s.jsx)("br",{}),"\nWhen running via docker, the directory can be mounted as ",(0,s.jsx)(n.code,{children:"-v $(pwd)/host_directory:/app/jellyfish_output"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_METRICS_IP"})," - an IP address to run metrics endpoint on.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"127.0.0.1"})," when running from source or using ",(0,s.jsx)(n.code,{children:"mix release"}),", or ",(0,s.jsx)(n.code,{children:"0.0.0.0"})," for Docker."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_METRICS_PORT"})," - a port to run metrics endpoint on.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"9568"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MIX_ENV"})," - defines compilation environment.\nThis variable takes effect only when running from the source.\nDocker images are always built with ",(0,s.jsx)(n.code,{children:"MIX_ENV=prod"}),".\nPossible values are:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dev"})," - uses default values for environment variables\n(default option when running with ",(0,s.jsx)(n.code,{children:"mix phx.server"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prod"})," - requires that you provide values for environment variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"test"})," - used in tests"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"distribution",children:"Distribution:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_ENABLED"})," - whether to run Jellyfish in a cluster.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_NODE_NAME"})," - Node name used in a cluster.\nIt consists of two parts - nodename@hostname.\nThe first part identifies a node on a single machine and can\nbe any string.\nThe second part identifies the host machine and has to be an\nip address or FQDN of a machine Jellyfish runs on.\nIf you run a cluster on a single machine or in the same docker network\nand you don't want to use IP addresses or FQDN as hostnames,\nyou can use short names (see ",(0,s.jsx)(n.code,{children:"JF_DIST_MODE"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_MODE"})," - distribution mode - can be ",(0,s.jsx)(n.code,{children:"name"})," or ",(0,s.jsx)(n.code,{children:"sname"}),".",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"name"}),".",(0,s.jsx)("br",{}),"\nWhen using ",(0,s.jsx)(n.code,{children:"name"}),", your hostname has to be an IP address or FQDN of a machine Jellyfish runs on.\nWhen using ",(0,s.jsx)(n.code,{children:"sname"}),", your hostname can be any string.\nSee our ",(0,s.jsx)(n.a,{href:"https://github.com/jellyfish-dev/jellyfish/blob/main/docker-compose.yaml",children:"docker-compose.yaml"}),", which we use in our integration tests for an example."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_COOKIE"})," - used to group Jellyfishes in a cluster.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"jellyfish_cookie"}),".",(0,s.jsx)("br",{}),"\nUse different cookies to create multiple clusters on the same machine.",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.strong,{children:"Important"}),": cookie does not provide any cryptographic security.\nIts only purpose is to prevent a node from connecting to a cluster with which\nit is not intended to communicate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_NODES"})," - space-separated list of other Jellyfishes to connect to.",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:'""'}),".",(0,s.jsx)("br",{}),"\nExample: ",(0,s.jsx)(n.code,{children:'JF_DIST_NODES="jellyfish1@127.0.0.1 jellyfish2@127.0.0.1"'}),".",(0,s.jsx)("br",{}),"\nThis list can also include ourselves so that you can pass the same value\nto every Jellyfish.\nNote: Jellyfish connection to other Jellyfish is transitive meaning that\nwhen you connect to one Jellyfish you also connect to all other Jellyfishes\nthis one was connected to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_MIN_PORT"}),"- minimal port used by Jellyfish when forming a cluster\n(connecting to other Jellyfishes).",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"9000"})," when running with Docker.",(0,s.jsx)("br",{}),"\nOnly available when running with Docker or ",(0,s.jsx)(n.code,{children:"mix release"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"JF_DIST_MAX_PORT"}),"- maximal port used by Jellyfish when forming a cluster\n(connecting to other Jellyfishes).",(0,s.jsx)("br",{}),"\nDefaults to ",(0,s.jsx)(n.code,{children:"9000"})," when running with Docker.",(0,s.jsx)("br",{}),"\nOnly available when running with Docker or ",(0,s.jsx)(n.code,{children:"mix release"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"You can use a single port to form a cluster, even if a cluster consists of\nmore than two Jellyfishes."})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Besides ports specified using ",(0,s.jsx)(n.code,{children:"JF_DIST_MIN_PORT"})," and ",(0,s.jsx)(n.code,{children:"JF_DIST_MAX_PORT"}),", Jellyfish\nalso uses one more service called EPMD that runs on port 4369.\nThis port has to be explicitly exported when running with Docker.\nRead more in the ",(0,s.jsx)(n.a,{href:"/jellyfish-docs/0.2.1/cluster",children:"Cluster"})," section."]})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>t});r(96540);var s=r(18215);const i={tabItem:"tabItem_Ymn6"};var l=r(74848);function t(e){let{children:n,hidden:r,className:t}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,t),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>w});var s=r(96540),i=r(18215),l=r(23104),t=r(56347),o=r(205),a=r(57485),c=r(31682),d=r(89466);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:i}}=e;return{value:n,label:r,attributes:s,default:i}}))}(r);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:r}=e;const i=(0,t.W6)(),l=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,l=u(e),[t,a]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:l}))),[c,h]=x({queryString:r,groupId:i}),[f,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,d.Dv)(r);return[i,(0,s.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:i}),m=(()=>{const e=c??f;return p({value:e,tabValues:l})?e:null})();(0,o.A)((()=>{m&&a(m)}),[m]);return{selectedValue:t,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),j(e)}),[h,j,l]),tabValues:l}}var j=r(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(74848);function g(e){let{className:n,block:r,selectedValue:s,selectValue:t,tabValues:o}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,r=a.indexOf(n),i=o[r].value;i!==s&&(c(n),t(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:l}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>a.push(e),onKeyDown:h,onClick:d,...l,className:(0,i.A)("tabs__item",m.tabItem,l?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:i}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",m.tabList),children:[(0,b.jsx)(g,{...e,...n}),(0,b.jsx)(v,{...e,...n})]})}function w(e){const n=(0,j.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(96540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);