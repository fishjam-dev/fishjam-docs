"use strict";(self.webpackChunkjellyfish_docs=self.webpackChunkjellyfish_docs||[]).push([[2660],{4800:(e,n,t)=>{t.d(n,{cp:()=>o});var i=t(17624),r=t(4552);function a(e){const n={a:"a",admonition:"admonition",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You can learn more about Jellyfish architecture in ",(0,i.jsx)(n.a,{href:"/",children:"Jellyfish\ndocs"}),". This section provides a\nbrief description aimed at front-end developers"]})}),"\n",(0,i.jsx)(n.p,{children:"Let's introduce some concepts first:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Peer"})," - A peer is a client-side entity that connects to the server to\npublish, subscribe or publish and subscribe to tracks published by components\nor other peers. You can think of it as a participant in a room. At the moment,\nthere is only one type of peer - WebRTC."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Track"})," - An object that represents an audio or video stream. A track can be\nassociated with a local media source, such as a camera or microphone, or a\nremote media source received from another user. Tracks are used to capture,\ntransmit, and receive audio and video data in WebRTC applications."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Room"})," - In Jellyfish, a room serves as a holder for peers and components,\nits function varying based on application. From a front-end perspective, this will\nbe probably one meeting or a broadcast."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For a better understanding of these concepts here is an example of a room that\nholds a standard WebRTC conference from a perspective of the User:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Room example",src:t(20048).c+"",width:"1195",height:"1224"})}),"\n",(0,i.jsx)(n.p,{children:"In this example, peers stream multiple video and audio tracks. Peer #1 streams\neven two video tracks (camera and screencast track). You can differentiate\nbetween them by using track metadata. The user gets info about peers and their\ntracks from the server using Jellyfish Client. The user is also informed in real\ntime about peers joining/leaving and tracks being added/removed."}),"\n",(0,i.jsx)(n.p,{children:"To keep this tutorial short we'll simplify things a little. Every peer will stream just one\nvideo track."}),"\n",(0,i.jsx)(n.h3,{id:"connecting-and-joining-the-room",children:"Connecting and joining the room"}),"\n",(0,i.jsx)(n.p,{children:"The general flow of connecting to the server and joining the room in a standard\nWebRTC conference setup looks like this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Connecting and joing the room",src:t(42824).c+"",width:"6158",height:"2195"})}),"\n",(0,i.jsx)(n.p,{children:"The parts that you need to implement are marked in blue and things handled by\nJellyfish are marked in red."}),"\n",(0,i.jsx)(n.p,{children:"Firstly, the user logs in. Then your backend authenticates the user and obtains\na peer token. It allows the user to authenticate and join the room in Jellyfish\nServer. The backend passes the token to your front-end, and your front-end passes\nit to Jellyfish Client. The client establishes the connection with Jellyfish\nServer. Then Jellyfish Client sets up tracks (camera, microphone) to stream and\njoins the room on Jellyfish Server. Finally, your front-end can display the room\nfor the user."}),"\n",(0,i.jsx)(n.p,{children:"For this tutorial we simplified this process a bit - you don't have to implement\na backend or authentication. Jellyfish Dashboard will do this for you. It's also\na nice tool to test and play around with Jellyfish. The flow with Jellyfish Dashboard looks like this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Connecting and joing the room with dashboard",src:t(8852).c+"",width:"5336",height:"2152"})}),"\n",(0,i.jsx)(n.p,{children:"You can see that the only things you need to implement are interactions with the\nuser and Jellyfish Client. This tutorial will show you how to do it."})]})}function o(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},39900:(e,n,t)=>{t.d(n,{cp:()=>l});var i=t(17624),r=t(4552),a=t(61268),o=t(87768);function s(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"There are a couple of ways to start the dashboard:"}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(o.c,{value:"main",label:"Up-to-date version",children:(0,i.jsxs)(n.p,{children:["The current version of the dashboard is ready to use and available\n",(0,i.jsx)(n.a,{href:"https://jellyfish-dev.github.io/jellyfish-dashboard/",children:"here"}),".\nEnsure that it is compatible with your Jellyfish server!\nPlease note that this dashboard only supports secure connections (https/wss)\nor connections to localhost. Any insecure requests (http/ws) will be automatically blocked by the browser."]})}),(0,i.jsxs)(o.c,{value:"docker",label:"Docker container",children:[(0,i.jsx)(n.p,{children:"The dashboard is also published as a docker image, you can pull it using:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull ghcr.io/jellyfish-dev/jellyfish-dashboard:v0.1.2\n"})})]}),(0,i.jsx)(o.c,{value:"repo",label:"Official repository",children:(0,i.jsxs)(n.p,{children:["You can also clone our ",(0,i.jsx)(n.a,{href:"https://github.com/jellyfish-dev/jellyfish-dashboard",children:"repo"}),"\nand run dashboard locally"]})})]})]})}function l(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}},13704:(e,n,t)=>{t.d(n,{cp:()=>o});var i=t(17624),r=t(4552);function a(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"For testing, we'll run the Jellyfish Media Server locally using Docker image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker run -p 50000-50050:50000-50050/udp \\\n           -p 5002:5002/tcp \\\n           -e JF_CHECK_ORIGIN=false \\\n           -e JF_HOST=<your ip address>:5002 \\\n           -e JF_PORT="5002" \\\n           -e JF_WEBRTC_USED=true \\\n           -e JF_WEBRTC_TURN_PORT_RANGE=50000-50050 \\\n           -e JF_WEBRTC_TURN_IP=<your ip address> \\\n           -e JF_WEBRTC_TURN_LISTEN_IP=0.0.0.0 \\\n           -e JF_SERVER_API_TOKEN=development \\\n           ghcr.io/jellyfish-dev/jellyfish:0.3.0\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure to set ",(0,i.jsx)(n.code,{children:"JF_WEBRTC_TURN_IP"})," and ",(0,i.jsx)(n.code,{children:"JF_HOST"})," to your local IP address. Without it, the mobile device won't be able to connect to the Jellyfish."]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"To check your local IP you can use this handy command (Linux/macOS):"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}'\n"})})]})]})}function o(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},35908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>f,frontMatter:()=>h,metadata:()=>p,toc:()=>g});var i=t(17624),r=t(4552),a=t(53404),o=t(61268),s=t(87768),l=t(4800),c=t(13704),d=t(39900);const h={title:"React Native"},u="React Native Minimal Working Example",p={id:"tutorials/react-native",title:"React Native",description:"This guide expects that you have read Basic Concepts and Example Scenarios",source:"@site/versioned_docs/version-0.4.0/tutorials/react-native.mdx",sourceDirName:"tutorials",slug:"/tutorials/react-native",permalink:"/jellyfish-docs/tutorials/react-native",draft:!1,unlisted:!1,editUrl:"https://github.com/jellyfish-dev/jellyfish-docs/versioned_docs/version-0.4.0/tutorials/react-native.mdx",tags:[],version:"0.4.0",frontMatter:{title:"React Native"},sidebar:"mainSidebar",previous:{title:"Simple React App",permalink:"/jellyfish-docs/tutorials/simple-react-app"},next:{title:"Server SDK Examples",permalink:"/jellyfish-docs/tutorials/server_sdk_examples"}},m={},g=[{value:"What you&#39;ll learn",id:"what-youll-learn",level:2},{value:"What do you need",id:"what-do-you-need",level:2},{value:"Jellyfish architecture",id:"jellyfish-architecture",level:2},{value:"Setup",id:"setup",level:2},{value:"Start the Jellyfish Dashboard",id:"start-the-jellyfish-dashboard",level:3},{value:"Start the dashboard web front-end",id:"start-the-dashboard-web-front-end",level:3},{value:"Create React Native / Expo project",id:"create-react-native--expo-project",level:3},{value:"Add dependencies",id:"add-dependencies",level:3},{value:"Native permissions configuration",id:"native-permissions-configuration",level:3},{value:"Add components library",id:"add-components-library",level:3},{value:"Screens",id:"screens",level:2},{value:"ConnectScreen",id:"connectscreen",level:2},{value:"Connecting to the server",id:"connecting-to-the-server",level:3},{value:"Camera permissions (Android only)",id:"camera-permissions-android-only",level:3},{value:"Starting the camera",id:"starting-the-camera",level:3},{value:"Joining the room",id:"joining-the-room",level:3},{value:"RoomScreen",id:"roomscreen",level:2},{value:"Displaying video tracks",id:"displaying-video-tracks",level:3},{value:"Gracefully leaving the room",id:"gracefully-leaving-the-room",level:3},{value:"Summary",id:"summary",level:2}];function x(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"react-native-minimal-working-example",children:"React Native Minimal Working Example"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This guide expects that you have read ",(0,i.jsx)(n.a,{href:"/jellyfish-docs/next/introduction/basic_concepts",children:(0,i.jsx)(n.code,{children:"Basic Concepts"})})," and ",(0,i.jsx)(n.a,{href:"/jellyfish-docs/next/introduction/example_scenarios",children:(0,i.jsx)(n.code,{children:"Example Scenarios"})})]})}),"\n",(0,i.jsx)(n.h2,{id:"what-youll-learn",children:"What you'll learn"}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial will guide you through creating your first React Native / Expo\nproject which uses Jellyfish client. By the end of the tutorial, you'll have a\nworking application that connects to an instance of ",(0,i.jsx)(n.a,{href:"https://github.com/jellyfish-dev/jellyfish",children:"Jellyfish Server"})," using WebRTC\nand streams and receives camera tracks."]}),"\n",(0,i.jsx)(a.M,{url:"/img/tutorials/rn_full_app.gif"}),"\n",(0,i.jsxs)(n.p,{children:["You can check out the finished project ",(0,i.jsx)(n.a,{href:"https://github.com/jellyfish-dev/jellyfish-clients-tutorials/tree/main/JellyfishDashboardRN",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"what-do-you-need",children:"What do you need"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["a little bit of experience in creating apps with React Native and/or Expo -\nrefer to the ",(0,i.jsx)(n.a,{href:"https://reactnative.dev/docs/getting-started",children:"React Native\nGuide"})," or ",(0,i.jsx)(n.a,{href:"https://docs.expo.dev/",children:"Expo\nGuide"})," to learn more"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"jellyfish-architecture",children:"Jellyfish architecture"}),"\n",(0,i.jsx)(l.cp,{}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.h3,{id:"start-the-jellyfish-dashboard",children:"Start the Jellyfish Dashboard"}),"\n",(0,i.jsx)(c.cp,{}),"\n",(0,i.jsx)(n.h3,{id:"start-the-dashboard-web-front-end",children:"Start the dashboard web front-end"}),"\n",(0,i.jsx)(d.cp,{}),"\n",(0,i.jsx)(n.h3,{id:"create-react-native--expo-project",children:"Create React Native / Expo project"}),"\n",(0,i.jsx)(n.p,{children:"Firstly create a brand new project."}),"\n",(0,i.jsxs)(o.c,{children:[(0,i.jsx)(s.c,{value:"react-native",label:"React Native",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native@latest init JellyfishDashboard\n"})})}),(0,i.jsx)(s.c,{value:"expo-bare",label:"Expo Bare workflow",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native init jellyfish-dashboard --template react-native-template-typescript\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"add-dependencies",children:"Add dependencies"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Please make sure to install or update ",(0,i.jsx)(n.code,{children:"expo"})," to version ",(0,i.jsx)(n.code,{children:"^49.0.0"})]})}),"\n",(0,i.jsxs)(n.p,{children:["You have two options here. You can follow configuration instructions for\nReact Native (Expo Bare workflow is a React Native project after all) or if\nyou're using ",(0,i.jsx)(n.code,{children:"expo prebuild"})," command to set up native code you can add our Expo\nplugin."]}),"\n",(0,i.jsxs)(n.p,{children:["Just add it to ",(0,i.jsx)(n.code,{children:"app.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"title:app.json",children:'{\n  "expo": {\n    "name": "example",\n    //...\n    "plugins": ["@jellyfish-dev/react-native-membrane-webrtc"]\n  }\n}\n'})}),"\n",(0,i.jsxs)(o.c,{children:[(0,i.jsxs)(s.c,{value:"react-native",label:"React Native",children:[(0,i.jsxs)(n.p,{children:["In order for this module to work you'll need to also add ",(0,i.jsx)(n.code,{children:"expo"})," package. The\nexpo package has a small footprint and it's necessary as Jellyfish Client\npackage is built as Expo module."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npx install-expo-modules@latest\nnpm install @jellyfish-dev/react-native-client-sdk\n"})})]}),(0,i.jsx)(s.c,{value:"expo-bare",label:"Expo Bare workflow",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx install-expo-modules@latest\nnpx expo install @jellyfish-dev/react-native-client-sdk\n"})})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"pod install"})," in the /ios directory to install the new pods"]})}),"\n",(0,i.jsx)(n.h3,{id:"native-permissions-configuration",children:"Native permissions configuration"}),"\n",(0,i.jsx)(n.p,{children:"In order for camera and audio to work you'll need to add some native configuration:"}),"\n",(0,i.jsx)(n.p,{children:"You need to at least set up camera permissions."}),"\n",(0,i.jsxs)(n.p,{children:["On Android add to your ",(0,i.jsx)(n.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'  <uses-permission android:name="android.permission.CAMERA"/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For audio you'll need the ",(0,i.jsx)(n.code,{children:"RECORD_AUDIO"})," permission:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title=AndroidManifest.xml",children:'  <uses-permission android:name="android.permission.RECORD_AUDIO"/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["On iOS you must set ",(0,i.jsx)(n.code,{children:"NSCameraUsageDescription"})," in ",(0,i.jsx)(n.code,{children:"Info.plist"})," file. You can\nedit this file in Xcode. This value is a description that is shown when iOS asks user\nfor camera permission."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title=ios/jellyfish-dashboard/Info.plist",children:"<key>NSCameraUsageDescription</key>\n<string> \ud83d\ude4f \ud83c\udfa5 </string>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, for audio there is ",(0,i.jsx)(n.code,{children:"NSMicrophoneUsageDescription"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title=ios/jellyfish-dashboard/Info.plist",children:"<key>NSMicrophoneUsageDescription</key>\n<string> \ud83d\ude4f \ud83c\udfa4 </string>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For screencast there is more configuration needed, it's described ",(0,i.jsx)(n.a,{href:"https://github.com/jellyfish-dev/react-native-client-sdk#ios",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We also suggest setting background mode to ",(0,i.jsx)(n.code,{children:"audio"})," so that the app doesn't\ndisconnect when it's in the background:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title=ios/jellyfish-dashboard/Info.plist",children:"<key>UIBackgroundModes</key>\n<array>\n  <string>audio</string>\n</array>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"add-components-library",children:"Add components library"}),"\n",(0,i.jsx)(n.p,{children:"For your convenience, we've prepared a library with nice-looking components\nuseful for following this tutorial. Feel free to use standard React Native components or your own components though!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx expo install @expo/vector-icons expo-barcode-scanner expo-font @expo-google-fonts/noto-sans @jellyfish-dev/react-native-jellyfish-components @react-navigation/native-stack\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsxs)(n.em,{children:["You'll also need to install ",(0,i.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started",children:"Reanimated library (3.3.0)"})," and ",(0,i.jsx)(n.a,{href:"https://reactnavigation.org/",children:"React Navigation (6.1.7)"})]})})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"pod install"})," in the /ios directory to install the new pods"]})}),"\n",(0,i.jsx)(n.h2,{id:"screens",children:"Screens"}),"\n",(0,i.jsxs)(n.p,{children:["For managing screens we will use React Navigation library, but feel free to pick whatever suits you.",(0,i.jsx)(n.br,{}),"\n","Our app will consist of two screens.",(0,i.jsx)(n.br,{}),"\n","The first one ",(0,i.jsx)(n.code,{children:"ConnectScreen"})," will allow a user to type, paste or scan a peer token and connect to the room.",(0,i.jsx)(n.br,{}),"\n","The second one ",(0,i.jsx)(n.code,{children:"RoomScreen"})," will show room participants with their video tracks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/App.tsx"',children:'import React from "react";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): JSX.Element {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Connect" component={ConnectScreen} />\n        <Stack.Screen name="Room" component={RoomScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"connectscreen",children:"ConnectScreen"}),"\n",(0,i.jsxs)(n.p,{children:["The UI of the ",(0,i.jsx)(n.code,{children:"ConnectScreen"})," consists of a simple text input and a few buttons.",(0,i.jsx)(n.br,{}),"\n","The flow for this screen is simple:",(0,i.jsx)(n.br,{}),"\n","the user either copies the peer token from the\ndashboard or scans it with a QR code scanner and presses Connect button.",(0,i.jsx)(n.br,{}),"\n","The QR code scanner is provided by our components library and it's completely optional,\njust for convenience."]}),"\n",(0,i.jsx)(n.p,{children:"The code for the UI looks like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'import React, { useState } from "react";\nimport { View, StyleSheet } from "react-native";\nimport {\n  Button,\n  TextInput,\n  QRCodeScanner,\n} from "@jellyfish-dev/react-native-jellyfish-components";\nimport { NavigationProp } from "@react-navigation/native";\n\ninterface ConnectScreenProps {\n  navigation: NavigationProp<any>;\n}\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      <Button\n        onPress={() => {\n          /* to be filled */\n        }}\n        title="Connect"\n        disabled={!peerToken}\n      />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: "center",\n    backgroundColor: "#BFE7F8",\n    padding: 24,\n    rowGap: 24,\n  },\n});\n\nexport default ConnectScreen;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"connecting-to-the-server",children:"Connecting to the server"}),"\n",(0,i.jsx)(n.p,{children:"Once the UI is ready, let's implement the logic responsible for connecting to the server."}),"\n",(0,i.jsxs)(n.p,{children:["Firstly wrap your app with ",(0,i.jsx)(n.code,{children:"JelyfishContextProvider"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/App.tsx"',children:'import React from "react";\n// highlight-next-line\nimport { JellyfishContextProvider } from "@jellyfish-dev/react-native-client-sdk";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\nimport ConnectScreen from "./screens/Connect";\nimport RoomScreen from "./screens/Room";\n\nconst Stack = createNativeStackNavigator();\n\nfunction App(): JSX.Element {\n  return (\n    // highlight-next-line\n    <JellyfishContextProvider>\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name="Connect" component={ConnectScreen} />\n          <Stack.Screen name="Room" component={RoomScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      // highlight-next-line\n    </JellyfishContextProvider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then in the ",(0,i.jsx)(n.code,{children:"ConnectScreen"})," use the ",(0,i.jsx)(n.code,{children:"useJellyfishClient"})," hook to connect to the\nserver. Simply call the ",(0,i.jsx)(n.code,{children:"connect"})," method with your Jellyfish server URL and the\npeer token. The ",(0,i.jsx)(n.code,{children:"connect"})," function establishes a connection with the Jellyfish server\nvia web socket and authenticates the peer."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'// highlight-next-line\nimport { useJellyfishClient } from "@jellyfish-dev/react-native-client-sdk";\nimport { NavigationProp } from "@react-navigation/native";\n\ninterface ConnectScreenProps {\n  navigation: NavigationProp<any>;\n}\n\n// This is the address of the Jellyfish backend. Change the local IP to yours. We\n// strongly recommend setting this as an environment variable, we hardcoded it here\n// for simplicity.\n// highlight-next-line\nconst JELLYFISH_URL = "ws://X.X.X.X:4000/socket/peer/websocket";\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): JSX.Element {\n  const [peerToken, setPeerToken] = useState<string>("");\n\n  // highlight-next-line\n  const { connect } = useJellyfishClient();\n\n  // highlight-start\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n  // highlight-end\n  return (\n    <View style={styles.container}>\n      <TextInput\n        placeholder="Enter peer token"\n        value={peerToken}\n        onChangeText={setPeerToken}\n      />\n      // highlight-next-line\n      <Button onPress={connectToRoom} title="Connect" disabled={!peerToken} />\n      <QRCodeScanner onCodeScanned={setPeerToken} />\n    </View>\n  );\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"camera-permissions-android-only",children:"Camera permissions (Android only)"}),"\n",(0,i.jsx)(n.p,{children:"To start the camera we need to ask the user for permission first. We'll use a\nstandard React Native module for this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'import {\n  View,\n  StyleSheet,\n  type Permission,\n  PermissionsAndroid,\n  Platform,\n} from "react-native";\n\n// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): JSX.Element {\n  // ...\n\n  // highlight-start\n  const grantedCameraPermissions = async () => {\n    if (Platform.OS === "ios") return true;\n    const granted = await PermissionsAndroid.request(\n      PermissionsAndroid.PERMISSIONS.CAMERA as Permission\n    );\n    if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\n      console.error("Camera permission denied");\n      return false;\n    }\n    return true;\n  };\n  // highlight-end\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      // highlight-start\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n      // highlight-end\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"starting-the-camera",children:"Starting the camera"}),"\n",(0,i.jsxs)(n.p,{children:["Jellyfish Client provides a handy hook for managing the camera: ",(0,i.jsx)(n.code,{children:"useCamera"}),".",(0,i.jsx)(n.br,{}),"\n","Not only it can start a camera but also toggle it, manage its state, simulcast and bandwidth settings, and switch between multiple sources.\nAlso when starting the camera you can provide multiple different settings such as\nresolution, quality, and metadata.",(0,i.jsx)(n.br,{}),"\n","In this example though we'll simply turn it\non to stream the camera to the dashboard with default settings"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'import {\n  useJellyfishClient,\n  // highlight-next-line\n  useCamera,\n} from "@jellyfish-dev/react-native-client-sdk";\n\n// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): JSX.Element {\n  // ...\n\n  // highlight-next-line\n  const { startCamera } = useCamera();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      // highlight-next-line\n      await startCamera();\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(n.h3,{id:"joining-the-room",children:"Joining the room"}),"\n",(0,i.jsxs)(n.p,{children:["The last step of connecting to the room would be actually joining it so\nthat your camera track is visible to the other users.",(0,i.jsx)(n.br,{}),"\n","To do this simply use the ",(0,i.jsx)(n.code,{children:"join"})," function\nfrom the ",(0,i.jsx)(n.code,{children:"useJellyfishClient"})," hook."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also provide some user metadata when joining.",(0,i.jsx)(n.br,{}),"\n","Metadata can be anything and is forwarded to the other participants as is.",(0,i.jsx)(n.br,{}),"\n","In our case, we pass a username."]}),"\n",(0,i.jsx)(n.p,{children:"After joining the room we navigate to the next screen: Room screen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Connect.tsx"',children:'// ...\n\nfunction ConnectScreen({ navigation }: ConnectScreenProps): JSX.Element {\n  // highlight-next-line\n  const { connect, join } = useJellyfishClient();\n\n  const connectToRoom = async () => {\n    try {\n      await connect(JELLYFISH_URL, peerToken.trim());\n\n      if (!(await grantedCameraPermissions())) {\n        return;\n      }\n\n      await startCamera();\n\n      // highlight-next-line\n      await join({ name: "Mobile RN Client" });\n      // highlight-next-line\n      navigation.navigate("Room");\n    } catch (e) {\n      console.log("Error while connecting", e);\n    }\n  };\n\n  // ...\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now the app is ready for the first test. If everything went well you should see\na video from your camera in the front-end dashboard. Now onto the second part:\ndisplaying the streams from other participants."}),"\n",(0,i.jsx)(n.h2,{id:"roomscreen",children:"RoomScreen"}),"\n",(0,i.jsx)(n.h3,{id:"displaying-video-tracks",children:"Displaying video tracks"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Room"})," screen has a couple of responsibilities:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["it displays your own video.",(0,i.jsx)(n.br,{}),"\n","Note that it's taken directly from your camera i.e. we don't send it to the JF and get it back so other participants might see you a little bit differently"]}),"\n",(0,i.jsx)(n.li,{children:"it presents current room state so participants list, their video tiles, etc."}),"\n",(0,i.jsx)(n.li,{children:"it allows you to leave a meeting"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To get information about all participants (also the local one) in the room use\n",(0,i.jsx)(n.code,{children:"usePeers()"})," hook from Jellyfish Client. The hook returns all the participants\nwith their ids, tracks and metadata. When a new participant joins or any\nparticipant leaves or anything else changes, the hook updates with the new\ninformation."]}),"\n",(0,i.jsxs)(n.p,{children:["To display video tracks Jellyfish Client comes with a dedicated component for\ndisplaying a video track: ",(0,i.jsx)(n.code,{children:"<VideoRenderer>"}),". It takes a track id as a prop (it\nmay be a local or remote track) and, as any other ",(0,i.jsx)(n.code,{children:"<View>"})," in react, a style.",(0,i.jsx)(n.br,{}),"\n","style property gives a ",(0,i.jsx)(n.a,{href:"https://reactnative.dev/docs/stylesheet",children:"lot of possibilities"}),". You can even animate your track!"]}),"\n",(0,i.jsx)(n.p,{children:"So, let's display all the participants in the simplest way possible:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:'import React from "react";\nimport { View, StyleSheet } from "react-native";\nimport { NavigationProp, RouteProp } from "@react-navigation/native";\n// highlight-start\nimport {\n  usePeers,\n  VideoRendererView,\n} from "@jellyfish-dev/react-native-client-sdk";\n// highlight-end\n\ninterface RoomScreenProps {\n  navigation: NavigationProp<YourNavigatorParamList>;\n}\n\nfunction RoomScreen({ navigation }: RoomScreenProps): JSX.Element {\n  // highlight-next-line\n  const peers = usePeers();\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.videoContainer}>\n        // highlight-start\n        {peers.map((peer) =>\n          peer.tracks[0] ? (\n            <VideoRendererView\n              trackId={peer.tracks[0].id}\n              style={styles.video}\n            />\n          ) : null\n        )}\n        // highlight-end\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "space-between",\n    backgroundColor: "#F1FAFE",\n    padding: 24,\n  },\n  videoContainer: {\n    flexDirection: "row",\n    gap: 8,\n    flexWrap: "wrap",\n  },\n  video: { width: 200, height: 200 },\n});\n\nexport default RoomScreen;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You should now see your own camera on your mobile device.",(0,i.jsx)(n.br,{}),"\n","You can add another participant and their new track (displaying for example rotating frog) in the dashboard like\nthis:"]}),"\n",(0,i.jsx)(a.M,{url:"/img/tutorials/adding_new_track.gif"}),"\n",(0,i.jsx)(n.p,{children:"It should show up in the Room screen automatically:"}),"\n",(0,i.jsx)(a.M,{url:"/img/tutorials/room_screen.png"}),"\n",(0,i.jsx)(n.p,{children:"For your convenience in our components library we provided a component to layout\nvideos in a nice grid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:'// highlight-next-line\nimport { VideosGrid } from "@jellyfish-dev/react-native-jellyfish-components";\n\n// ...\n\nfunction RoomScreen({ navigation }: RoomScreenProps): JSX.Element {\n  const peers = usePeers();\n\n  return (\n    <View style={styles.container}>\n      // highlight-start\n      <VideosGrid\n        tracks={peers.map((peer) => peer.tracks[0]?.id).filter((t) => t)}\n      />\n      // highlight-end\n    </View>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gracefully-leaving-the-room",children:"Gracefully leaving the room"}),"\n",(0,i.jsxs)(n.p,{children:["To leave a room we'll add a button for the user. When the user clicks it, we\ngracefully leave the room, close the server connection and go back to the\n",(0,i.jsx)(n.code,{children:"Connectscreen"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For leaving the room and closing the server connection you can use the ",(0,i.jsx)(n.code,{children:"cleanUp"})," method from the ",(0,i.jsx)(n.code,{children:"useJellyfishClient()"})," hook."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="/screens/Room.tsx"',children:'// ...\n\nimport {\n  usePeers,\n  VideoRendererView,\n  // highlight-next-line\n  useJellyfishClient,\n} from "@jellyfish-dev/react-native-client-sdk";\n// highlight-next-line\nimport { InCallButton } from "@jellyfish-dev/react-native-jellyfish-components";\n\n// ...\n\nfunction RoomScreen({ navigation }: RoomScreenProps): JSX.Element {\n  const peers = usePeers();\n  // highlight-start\n  const { cleanUp } = useJellyfishClient();\n\n  const onDisconnectPress = () => {\n    cleanUp();\n    navigation.goBack();\n  };\n  // highlight-end\n\n  return (\n    <View style={styles.container}>\n      <VideosGrid\n        tracks={peers.map((peer) => peer.tracks[0]?.id).filter((t) => t)}\n      />\n      // highlight-start\n      <InCallButton\n        type="disconnect"\n        iconName="phone-hangup"\n        onPress={onDisconnectPress}\n      />\n      // highlight-end\n    </View>\n  );\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"To launch your app, you can use the following command:"}),"\n",(0,i.jsxs)(o.c,{children:[(0,i.jsx)(s.c,{value:"ios",label:"ios",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run ios\n"})})}),(0,i.jsx)(s.c,{value:"android",label:"android",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run android\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"Congrats on finishing your first Jellyfish mobile application! In this tutorial,\nyou've learned how to make a basic Jellyfish client application that streams and\nreceives video tracks with WebRTC technology."}),"\n",(0,i.jsx)(n.p,{children:"But this was just the beginning. Jellyfish Client supports much more than just\nstreaming camera: it can also stream audio, screencast your device's screen,\nconfigure your camera and audio devices, detect voice activity, control\nsimulcast, bandwidth and encoding settings, show camera preview, display WebRTC\nstats and more to come. Check out our other tutorials to learn about those\nfeatures."}),"\n",(0,i.jsxs)(n.p,{children:["You can also take a look at our fully featured ",(0,i.jsx)(n.a,{href:"https://github.com/jellyfish-dev/react-native-membrane-webrtc/tree/master/example",children:"Videoroom Demo\nexample"}),":"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Videoroom Demo",src:t(9752).c+"",width:"720",height:"720"})})]})}function f(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},87768:(e,n,t)=>{t.d(n,{c:()=>o});t(11504);var i=t(34064);const r={tabItem:"tabItem_Ymn6"};var a=t(17624);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.c)(r.tabItem,o),hidden:t,children:n})}},61268:(e,n,t)=>{t.d(n,{c:()=>w});var i=t(11504),r=t(34064),a=t(53943),o=t(55592),s=t(95288),l=t(10632),c=t(27128),d=t(21148);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.Uz)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._M)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=u(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[c,h]=m({queryString:t,groupId:r}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,d.IN)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),f=(()=>{const e=c??g;return p({value:e,tabValues:a})?e:null})();(0,s.c)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,a]),tabValues:a}}var x=t(93664);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(17624);function v(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.MV)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==i&&(c(n),o(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.c)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...a,className:(0,r.c)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:r}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function b(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,r.c)("tabs-container",f.tabList),children:[(0,j.jsx)(v,{...e,...n}),(0,j.jsx)(y,{...e,...n})]})}function w(e){const n=(0,x.c)();return(0,j.jsx)(b,{...e,children:h(e.children)},String(n))}},53404:(e,n,t)=>{t.d(n,{M:()=>o});t(11504);var i=t(70964),r=t(61964),a=t(17624);const o=e=>{let{url:n,height:t,alt:o}=e;return(0,a.jsx)("p",{style:{display:"flex",justifyContent:"center"},children:(0,a.jsx)(r.c,{height:t,alt:o,sources:{light:(0,i.c)(n),dark:(0,i.c)(n)}})})}},42824:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/connection-1c1c4ee125e1e5dec0fcfad61e0174a8.png"},8852:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/dashboard_connection-06d1d36ef4f41cc0672c2df0511af63a.png"},20048:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/room_example-e9c6acb4df6063de5a8978dc6710b909.png"},9752:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/videoroom-b9c2dd933b2f8d5061aa5b5c53c19a3d.gif"},4552:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>o});var i=t(11504);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);